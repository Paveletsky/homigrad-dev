A_AM.ActMod.LuaBas = true A_AM.ActMod.svOn = true   if !ConVarExists("actmod_sv_enabled") then     CreateConVar("actmod_sv_enabled", '1' , { FCVAR_REPLICATED, FCVAR_NOTIFY } ) end  if !ConVarExists("actmod_sy_tovs") then     CreateConVar("actmod_sy_tovs", '3', { FCVAR_REPLICATED, FCVAR_ARCHIVE, FCVAR_NOTIFY },"1 = for use Net Library  , 2 = for use The concommand library" ) end  if !ConVarExists("actmod_sy_tovs_eff") then     CreateConVar("actmod_sy_tovs_eff", '2' , { FCVAR_REPLICATED, FCVAR_ARCHIVE, FCVAR_NOTIFY } ) end  if !ConVarExists("actmod_sy_tovs_mmdfast") then     CreateConVar("actmod_sy_tovs_mmdfast", '1' ,{FCVAR_REPLICATED,FCVAR_ARCHIVE} ) end  if !ConVarExists("actmod_sy_tovs_strfast") then     CreateConVar("actmod_sy_tovs_strfast", '1' ,{FCVAR_REPLICATED,FCVAR_ARCHIVE} ) end  if !ConVarExists("actmod_sv_enabled_addef") then     CreateConVar("actmod_sv_enabled_addef", '1' ,{FCVAR_REPLICATED,FCVAR_ARCHIVE} ) end  if !ConVarExists("actmod_sv_enabled_addso") then     CreateConVar("actmod_sv_enabled_addso", '1' ,{FCVAR_REPLICATED,FCVAR_ARCHIVE}) end  if !ConVarExists("actmod_sv_avs") then     CreateConVar("actmod_sv_avs", '1' ,{FCVAR_REPLICATED,FCVAR_ARCHIVE} ) end  if !ConVarExists("actmod_sv_soundlevel") then     CreateConVar("actmod_sv_soundlevel", 75 ,{FCVAR_REPLICATED,FCVAR_ARCHIVE} ,"min: 20  /  max: 100" ,20,100 ) end   if SERVER then 	util.AddNetworkString("A_AM.ActMod.ClToSv_sound") 	util.AddNetworkString("A_AM.ActMod.ClToSv_Effects") 	util.AddNetworkString("A_AM.ActMod.ClToSv_loop") 	util.AddNetworkString("A_AM.ActMod.ClToSv_ReTast") 	util.AddNetworkString("A_AM.ActMod.SvToCl_restuo") 	util.AddNetworkString("A_AM.ActMod.ClToSv_restuo") 	util.AddNetworkString("A_AM.ActMod.ClToSv_NWBool") 	util.AddNetworkString("A_AM.ActMod.SetTCl_NWBool") 	util.AddNetworkString("A_AM.ActMod.SvCallRestart") 	util.AddNetworkString("A_AM.ActMod.CallRestart") 	util.AddNetworkString("A_AM.ActMod.iError_sv") 	util.AddNetworkString("A_AM.ActMod.iError_cl") 	util.AddNetworkString("A_AM.ActMod.AngEyeP") 	util.AddNetworkString("A_AM.ActMod.CallCycle") 	util.AddNetworkString("A_AM.ActMod.CallCycleAEff") 	util.AddNetworkString("A_AM.ActMod.StartCamera") 	util.AddNetworkString("A_AM.ActMod.CancelCamera") 	util.AddNetworkString("A_AM.ActMod.Start") 	util.AddNetworkString("A_AM.ActMod.AddMdl") 	util.AddNetworkString("A_AM.ActMod.AddRemove") 	util.AddNetworkString("A_AM.ActMod.act_Tocl") 	util.AddNetworkString("A_AM.ActMod.ClToSv_OkAct") 	util.AddNetworkString("A_AM.SC_T_PlyP_ToSv") 	util.AddNetworkString("A_AM.SC_T_PlyP_ToCl") 	util.AddNetworkString("A_AM.ActMod.ClToSv") 	util.AddNetworkString("A_AM.ActMod.SvToCl") 	util.AddNetworkString("A_AM.ActMod.SToC_ST") 	util.AddNetworkString("A_AM.ActMod.CToS_ST")  	function A_AM.ActMod:ReTast_Seq_restuo(clnt,ttrue) 		local GMdl = "models/player/kleiner.mdl" 		if file.Exists("models/player/d1anim_m.mdl", "GAME") then GMdl = "models/player/d1anim_m.mdl" end 		local function Tast_Seq_restuo(sstr) 			local ActEntDemo = ents.Create("prop_dynamic") 			if IsValid(ActEntDemo) then 				ActEntDemo:SetNoDraw( true ) 				ActEntDemo:SetModel(GMdl) 				local seq = ActEntDemo:LookupSequence( sstr ) 				if seq <= 0 then 					ActEntDemo:ResetSequence(ActEntDemo:LookupSequence(sstr)) 					local GetSeq_EACT = ActEntDemo:GetSequenceInfo( ActEntDemo:GetSequence() ).label 					ActEntDemo:Remove() 					return GetSeq_EACT == sstr 				else 					ActEntDemo:Remove() 					return true 				end 			else 				return false 			end 		end   		local function Tast_Seq_ShowT(s1,s2,ch) 			MsgC(Color( 90, 255, 255 ),"\n-> "..s1) 			if A_AM.ActMod.Mounted[s2] == true then 				MsgC(Color( 90, 255, 150 ),"True") 				if ch == true then 					MsgC(Color( 190, 200, 210 ),"  ( " ,Color( 210, 255, 240 ),(A_AM.ActMod.Mounted["GetSeqTr_SV_Base_Setxdr"] == true and "xdR" or "wOS"),Color( 190, 200, 210 )," )") 				end 			else 				MsgC(Color( 255, 100, 70 ),"False") 			end 		end 		local function Tast_Precache(pch,typ) 			for name, filename in pairs(file.Find(pch..(typ == "model" and "/*.mdl" or "/*.*") , "GAME")) do 				util.PrecacheModel(pch..string.lower(filename)) 			end 		end  		if (file.Exists( "models/m_xda.mdl", "GAME") or file.Exists( "models/player/wiltos/anim_base.mdl", "GAME")) then A_AM.ActMod.Mounted[ "GetMDLTr_SV_Base" ] = true else A_AM.ActMod.Mounted[ "GetMDLTr_SV_Base" ] = false end 		if file.Exists( "models/player/custom_taunt/fortnite3.mdl", "GAME") then A_AM.ActMod.Mounted[ "GetMDLTr_SV_ECTE" ] = true else A_AM.ActMod.Mounted[ "GetMDLTr_SV_ECTE" ] = false end 		if file.Exists( "models/player/ani_am4/ani_base.mdl", "GAME") then A_AM.ActMod.Mounted[ "GetMDLTr_SV_BAM4" ] = true else A_AM.ActMod.Mounted[ "GetMDLTr_SV_BAM4" ] = false end 		if file.Exists( "models/player/ani_am4/add_taunt/anim_m_01.mdl", "GAME") then A_AM.ActMod.Mounted[ "GetMDLTr_SV_EAM4" ] = true else A_AM.ActMod.Mounted[ "GetMDLTr_SV_EAM4" ] = false end  		if (Tast_Seq_restuo("_base_wiltos_enabled_") == true or Tast_Seq_restuo("xdreanims_enabled") == true or (Tast_Seq_restuo("Amod_Mixamo_sit") == true and Tast_Seq_restuo("Cry") == true )) then 			A_AM.ActMod.Mounted[ "GetSeqTr_SV_Base" ] = true 			if Tast_Seq_restuo("xdreanims_enabled") == true then 				A_AM.ActMod.Mounted[ "GetSeqTr_SV_Base_Setxdr" ] = true 			else 				A_AM.ActMod.Mounted[ "GetSeqTr_SV_Base_Setxdr" ] = false 			end 		else 			A_AM.ActMod.Mounted[ "GetSeqTr_SV_Base" ] = false 		end 		timer.Simple(0.1, function() if Tast_Seq_restuo("am4_enabled") == true then A_AM.ActMod.Mounted[ "GetSeqTr_SV_BAM4" ] = true else A_AM.ActMod.Mounted[ "GetSeqTr_SV_BAM4" ] = false end end) 		timer.Simple(0.3, function() if Tast_Seq_restuo("f_ThumbsUp") == true then A_AM.ActMod.Mounted[ "GetSeqTr_SV_ECTE" ] = true else A_AM.ActMod.Mounted[ "GetSeqTr_SV_ECTE" ] = false end end) 		timer.Simple(0.4, function() if Tast_Seq_restuo("wos_tf2_demo_taunt_mannrobics_straight") == true then A_AM.ActMod.Mounted[ "GetSeqTr_SV_TF2" ] = true else A_AM.ActMod.Mounted[ "GetSeqTr_SV_TF2" ] = false end end) 		timer.Simple(0.5, function() if Tast_Seq_restuo("Amod_Dance_Macarena") == true then A_AM.ActMod.Mounted[ "GetSeqTr_SV_EAM4" ] = true else A_AM.ActMod.Mounted[ "GetSeqTr_SV_EAM4" ] = false end end) 		timer.Simple(0.6, function() Tast_Precache("models/actmod","model") end) 		timer.Simple(0.6, function() 			if ttrue == "showMsg" and clnt and IsValid(clnt) and clnt:IsPlayer() then MsgC(Color( 90, 255, 255 ),"\n\nFrom Player : "..clnt:Nick()) end 			MsgC(Color( 90, 255, 255 ),"\n[ Start-> TastServer_Seq ] :") 			Tast_Seq_ShowT("( wOS-Base ) or ( xdR-Base ) == ","GetSeqTr_SV_BAM4",true) 			Tast_Seq_ShowT("[wOS] Animation Extension - Custom Taunt == ","GetSeqTr_SV_ECTE") 			Tast_Seq_ShowT("[wOS] Animation Extension - Team Fortress 2 == ","GetSeqTr_SV_TF2") 			Tast_Seq_ShowT("[(AM4-Anim)] Pack Animatoin for ActMod == ","GetSeqTr_SV_EAM4") 			MsgC(Color( 90, 255, 255 ),"\n[ End --> TastServer_Seq ]\n\n") 		end) 	end  end   function A_AM.ActMod:ATabData( tbl, str ,hlp ) if tbl and tbl != "false" then for k, v in pairs( tbl ) do if hlp then print("Search_"..k.."->" ,v) end if str and v == str then return true end end end return false end   function A_AM.ActMod:ATabDataGNum( tbl ,hlp ) 	local GNum = 0 	if tbl and tbl != "false" then 		for k, v in pairs( tbl ) do 			if hlp then print("Search_"..k.."->" ,v) end 			GNum = GNum+1 		end 	end 	return GNum end   function AAct_CreateSound(plt,sound,SettoG,soundlevel,soundpitch,sounddsp) 	local Strg = plt:GetNWString("A_ActMod.Dir", "") or "" 	if not sound or (plt:IsPlayer() and (Strg == "" or Strg == nil)) then return end 	if istable(sound) then if #sound < 1 then return end sound = sound[math.random(1,#sound)] end 	if GetConVar("actmod_sy_tovs_strfast"):GetInt() == 1 and plt:IsPlayer() and not plt.SVAct_Svsound and plt.ActMod_SFast == true and not plt.SVAct_Tsound then 		plt.SVAct_Tsound = {} 		plt.SVAct_Tsound["sound"] = sound 		if soundlevel then 			plt.SVAct_Tsound["SettoG"] = tostring(SettoG) 		else 			plt.SVAct_Tsound["SettoG"] = "1" 		end 		if soundlevel then 			plt.SVAct_Tsound["soundlevel"] = tostring(soundlevel) 		else 			plt.SVAct_Tsound["soundlevel"] = GetConVarString("actmod_sv_soundlevel") 		end 		if plt.ActMod_tAb and plt.ActMod_tAb[2] != nil then 			plt.SVAct_Tsound["onSnd"] = tostring(plt.ActMod_tAb[2]) 		else 			plt.SVAct_Tsound["onSnd"] = "3" 		end 		 	elseif GetConVar("actmod_sy_tovs"):GetInt() == 1 or !plt:IsPlayer() then 		local soundid 		if SettoG == 2 then soundid = plt.AAct_S2 		elseif SettoG == 3 then soundid = plt.AAct_S3 		else soundid = plt.AAct_S1 		end 		if soundid then soundid:Stop() soundid = nil end 		soundid = CreateSound(plt, sound) 		if IsValid(plt) and soundid then 			soundid:SetSoundLevel(soundlevel or GetConVarNumber("actmod_sv_soundlevel")) 			if plt:IsPlayer() then 				if plt:A_ActModSound() == true then soundid:PlayEx(1,soundpitch or 100) soundid:Play() else soundid:Stop() soundid = nil end 			else 				soundid:PlayEx(1,soundpitch or 100) soundid:Play() 			end 		end 		if sounddsp then soundid:SetDSP(sounddsp) end 		if SettoG == 2 then plt.AAct_S2 = soundid 		elseif SettoG == 3 then plt.AAct_S3 = soundid 		else plt.AAct_S1 = soundid 		end 		 		if plt:IsPlayer() then 			plt.AA_aws = 0 			if timer.Exists( "AA_TReSond"..plt:EntIndex() ) then timer.Remove( "AA_TReSond"..plt:EntIndex() ) end 			timer.Create("AA_TReSond"..plt:EntIndex(),0.2,3,function() 				if plt and IsValid(plt) and soundid and plt:GetNWBool( "A_AM.ActMod.IsAct", false ) == true and Strg == plt:GetNWString("A_ActMod.Dir", "") then 					if plt:A_ActModSound() == true then plt.AA_aws = plt.AA_aws + 1 					if plt.AA_aws > 2 then soundid:PlayEx(1,soundpitch or 100) plt.AA_aws = 0 end soundid:Play() 					else soundid:Stop() soundid = nil 					end 				end 			end) 		end 		return soundid 		 	else 		local onSnd 		if plt.ActMod_tAb and plt.ActMod_tAb[2] != nil then onSnd = tostring(plt.ActMod_tAb[2]) else onSnd = "3" end 		local sous,afs,alevel = 1,"0",soundlevel or GetConVarNumber("actmod_sv_soundlevel") 		if SettoG then sous = SettoG end 		if plt.SVAct_Svsound then afs = "1" end 		if GetConVar("actmod_sy_tovs"):GetInt() == 3 and plt:IsPlayer() then 			net.Start( "A_AM.ActMod.SToC_ST" ) 			 net.WriteEntity( NULL ) 			 net.WriteString( "SToC_" ) 			 net.WriteTable( {"wts_StartSond",plt:EntIndex(),tostring(sous),sound,tostring(alevel),onSnd,afs} ) 			net.Broadcast() 		else 			for _, pl in pairs(player.GetAll()) do 				if IsValid(pl) and !pl:IsBot() then 					pl:ConCommand("actmod_wtc wts_StartSond ".. plt:EntIndex() .." ".. tostring(sous) .." ".. sound .." ".. tostring(alevel) .." ".. onSnd .." ".. afs .."\n") 				end 			end 		end 	end end function AAct_STOPSOUND(ply,nor) 	if IsValid(ply) then 		local sous,afs = 0,"0" 		if nor then sous = nor end 		if GetConVar("actmod_sy_tovs_strfast"):GetInt() == 3 and ply.SVAct_Svsound then afs = "1" end 		if GetConVar("actmod_sy_tovs"):GetInt() == 1 or !ply:IsPlayer() then 			if sous == 1 then if ply.AAct_S1 then ply.AAct_S1:Stop() ply.AAct_S1 = nil end 			elseif sous == 2 then if ply.AAct_S2 then ply.AAct_S2:Stop() ply.AAct_S2 = nil end 			elseif sous == 3 then if ply.AAct_S3 then ply.AAct_S3:Stop() ply.AAct_S3 = nil end 			elseif ply then if ply.AAct_S1 then ply.AAct_S1:Stop() ply.AAct_S1 = nil end if ply.AAct_S2 then ply.AAct_S2:Stop() ply.AAct_S2 = nil end if ply.AAct_S3 then ply.AAct_S3:Stop() ply.AAct_S3 = nil end 			end 		elseif GetConVar("actmod_sy_tovs"):GetInt() == 3 then 			net.Start( "A_AM.ActMod.SToC_ST" ) 			 net.WriteEntity( NULL ) 			 net.WriteString( "SToC_" ) 			 net.WriteTable( {"wts_StopSond",ply:EntIndex(),tostring(sous),afs} ) 			net.Broadcast() 		else 			for _, pl in pairs(player.GetAll()) do if IsValid(pl) and !pl:IsBot() then pl:ConCommand("actmod_wtc wts_StopSond ".. ply:EntIndex() .." ".. tostring(sous) .." ".. afs .."\n") end end 		end 	end end  function A_IsL4DA(av) if ( av:GetNWBool( "L4DA.IsHntrAttPly" ) == true or av:GetNWBool( "L4DA.IsChargerAttPly" ) == true or av:GetNWBool( "L4DA.IsJockeyAttPly" ) == true or av:GetNWBool( "L4DA.IsSmokerAttPly" ) == true ) then return true end return false end   local meta = FindMetaTable( "Player" )  function meta:A_ActModSound() return self:GetNWBool( "A_ActMod_cl_Sound", false ) end function meta:A_ActModEffects() return self:GetNWBool( "A_ActMod_cl_Effects", false ) end function meta:A_ActModLoop() return self:GetNWInt( "A_ActMod_cl_Loop", 0 ) end function meta:A_ActModString() return self:GetNWString("A_ActMod_cl_actLoop", "" ) end function meta:A_ActMod_GetActTime() return ( self:GetNWInt( "A_AM.ActTime", 0 ) ) end function meta:A_ActMod_IsActing() 	if self:A_ActMod_GetActTime() == -2 then 		return true 	else 		return ( self:A_ActMod_GetActTime() >= CurTime() ) 	end end   function meta:A_ActMod_RateAct() return ( self:GetNWInt( "A_AM.ActRate", 1 ) ) end function meta:A_ActMod_CycleAct() return ( self:GetNWInt( "A_AM.ActCycle", 0 ) ) end  function meta:A_ActMod_GetIsAct() return ( self:GetNWBool( "A_AM.ActMod.IsAct", false ) ) end function meta:A_ActMod_GetSqAct() return ( self:GetNWBool( "A_AM.ActMod.SqAct", false ) ) end function meta:A_BED(ty,txt) return A_AM.ActMod:AG_BED(ty,txt) end function meta:A_ActMod_CamParent() return ( self:GetNWBool( "A_AM.ActMod.Cam_Parent", false ) ) end function meta:A_ActMod_CamInLerp() return ( self:GetNWInt( "A_AM.ActMod.CamInLerp", 5.0 ) ) end  function meta:A_ActMod_OnButtons() return ( self:GetNWBool( "A_AM.ActMod.OnButtons", false ) ) end  function meta:A_ActMod_GetMoveDir() return ( self:GetNWInt( "A_ActMod.MoveDir", 0 ) ) end   function meta:A_ActMod_GetWeapAct() if self:GetActiveWeapon() and self:GetActiveWeapon():IsValid() and self:GetActiveWeapon():GetClass() == "aact_weapact" then return true else return false end end  function meta:A_ActMod_GetActDir() local ReNamAct = self:GetNWString("A_ActMod.Dir", "") if string.find(ReNamAct, ".png") then ReNamAct = string.Replace(ReNamAct,".png","") self:SetNWString("A_ActMod.Dir", ReNamAct) end if string.find(ReNamAct, "._c1_.") then ReNamAct = string.Replace(ReNamAct,"._c1_.","") self:SetNWString("A_ActMod.Dir", ReNamAct) self:SetNWBool( "A_AM.ActMod.AddC1", true ) end if string.find(ReNamAct, "._c2_.") then ReNamAct = string.Replace(ReNamAct,"._c2_.","") self:SetNWString("A_ActMod.Dir", ReNamAct) self:SetNWBool( "A_AM.ActMod.AddC2", true ) end if string.find(ReNamAct, "._mo_.") then ReNamAct = string.Replace(ReNamAct,"._mo_.","") self:SetNWString("A_ActMod.Dir", ReNamAct) self:SetNWBool( "A_AM.ActMod.AddMo", true ) end if string.find(ReNamAct, "._ef_.") then ReNamAct = string.Replace(ReNamAct,"._ef_.","") self:SetNWString("A_ActMod.Dir", ReNamAct) self:SetNWBool( "A_AM.ActMod.AddEf", true ) end if string.find(ReNamAct, "._so_.") then ReNamAct = string.Replace(ReNamAct,"._so_.","") self:SetNWString("A_ActMod.Dir", ReNamAct) self:SetNWBool( "A_AM.ActMod.AddSo", true ) end 	if self:A_ActMod_GetWeapAct() then return ( self:GetNWString("A_ActMod.Dir", "") ) end 	return "" end  function meta:A_ActMod_GetActString(st) local ReNamAct = st or "-_none_-" if string.find(ReNamAct, ".png") then ReNamAct = string.Replace(ReNamAct,".png","") end if string.find(ReNamAct, "._c1_.") then ReNamAct = string.Replace(ReNamAct,"._c1_.","") self:SetNWBool( "A_AM.ActMod.AddC1", true ) end if string.find(ReNamAct, "._c2_.") then ReNamAct = string.Replace(ReNamAct,"._c2_.","") self:SetNWBool( "A_AM.ActMod.AddC2", true ) end if string.find(ReNamAct, "._mo_.") then ReNamAct = string.Replace(ReNamAct,"._mo_.","") self:SetNWBool( "A_AM.ActMod.AddMo", true ) end if string.find(ReNamAct, "._ef_.") then ReNamAct = string.Replace(ReNamAct,"._ef_.","") self:SetNWBool( "A_AM.ActMod.AddEf", true ) end if string.find(ReNamAct, "._so_.") then ReNamAct = string.Replace(ReNamAct,"._so_.","") self:SetNWBool( "A_AM.ActMod.AddSo", true ) end  	return ReNamAct end  function meta:A_ActMod_OnNormal() 	if SERVER then 		if (self:GetActiveWeapon() and self:GetActiveWeapon():IsValid() and self:GetActiveWeapon():GetClass() == "aact_weapact") then 			return true 		end 		return false 	end end   function A_AM.ActMod:AG_BED(AY,txt) local Atxt = txt if AY == 1 then Atxt = util.Base64Encode( txt ) elseif AY == 2 then Atxt = util.Base64Decode( txt ) end return Atxt end  function A_AM.ActMod:A_ActMod_OffActing( ply,nstp,tabAgb ) 	if ply:A_ActMod_GetIsAct() != true then return end 	if A_AM.ActMod.LuaSAnim and ply.ActMod_Cum then 		A_AM.ActMod.SyAnim.StopAnim(ply) 	end 	ply.AGSped_f = 0 	ply.AGSped_b = 0 	ply.SVAct_Tsound = nil 	ply.SVAct_Svsound = nil 	ply.ActMod_ROne = nil 	ply.ActMod_JOne = nil 	ply.ActMod_JOneed = nil 	ply.AalowAnim = nil 	ply.AalowAnim_MForward = nil 	ply.ActMod_Cum = nil 	ply:SetNWString("A_ActMod.Dir", "") 	ply:SetNWString("A_ActMod_cl_actLoop", "") 	ply:SetCycle(0) 	ply:SetNWInt("A_ActMod.MoveDir", 0)  	if ply:A_ActMod_GetSqAct() then 		ply:SetNWBool("A_AM.ActMod.SqAct", false) 		ply:DoCustomAnimEvent(PLAYERANIMEVENT_CUSTOM, 100010) 	end  	if nstp then 		ply:SetNWInt("A_AM.ActTime", -2) 	else 		ply:SetNWInt("A_AM.ActTime", 0) 		ply:SetNWBool("A_AM.ActMod.IsAct", false) 	end 	 	if timer.Exists( "AA_TEnd"..ply:EntIndex() ) then timer.Remove( "AA_TEnd"..ply:EntIndex() ) end 	 	if SERVER then 		ply.ActMod_GStrg = "" 		ply.ActMod_tAb = nil 		ply.ActMod_Oall = nil 		ply.ActMod_GHold = nil 		ply.ActMod_SFast = nil  		if tabAgb and istable(tabAgb) then 			ply:SetEyeAngles(Angle(tabAgb[1],tabAgb[2],0)) 		elseif ply.ActMod_GeetAng ~= nil then 			ply:SetEyeAngles(ply.ActMod_GeetAng) 		elseif ply.ActMod_DetAng ~= nil then 			ply:SetEyeAngles(ply.ActMod_DetAng) 		end 		ply.ActMod_GeetAng = nil 		ply.ActMod_DetAng = nil 		ply.ActMod_BeetAng = nil  		if timer.Exists("AA_TJOne" .. ply:EntIndex()) then timer.Remove("AA_TJOne" .. ply:EntIndex()) end 		if timer.Exists("AA_TReSond" .. ply:EntIndex()) then timer.Remove("AA_TReSond" .. ply:EntIndex()) end 		if timer.Exists("AA_TStratA" .. ply:EntIndex()) then timer.Remove("AA_TStratA" .. ply:EntIndex()) end 		if timer.Exists("AA_TReA" .. ply:EntIndex()) then timer.Remove("AA_TReA" .. ply:EntIndex()) end 		if timer.Exists("AA_TMov" .. ply:EntIndex()) then timer.Remove("AA_TMov" .. ply:EntIndex()) end 		if timer.Exists("AA_TSTr" .. ply:EntIndex()) then timer.Remove("AA_TSTr" .. ply:EntIndex()) end 		if timer.Exists("AA_RLoop" .. ply:EntIndex()) then timer.Remove("AA_RLoop" .. ply:EntIndex()) end 		if timer.Exists("AA_RLoopAnim" .. ply:EntIndex()) then timer.Remove("AA_RLoopAnim" .. ply:EntIndex()) end 		if timer.Exists("AA_RLoopSond" .. ply:EntIndex()) then timer.Remove("AA_RLoopSond" .. ply:EntIndex()) end  		ply.TimeGo_Attk = nil  		if not nstp then 			if ply:GetActiveWeapon() and ply:GetActiveWeapon():IsValid() then 				local wep = ply:GetActiveWeapon() 				if IsValid(wep) and wep:GetClass() == "aact_weapact" then 					wep.offweap = true 					wep.ply = nil 					wep.Weapon.ply = nil 					if ply.A_oldWeap then 						ply:SelectWeapon(ply.A_oldWeap) 						ply:SetNWString( "A_AM.ActMod.GetWeap", "" ) 						ply.A_oldWeap = nil 					end 					ply:StripWeapon(wep:GetClass()) 					if wep:IsValid() then 						wep:Remove() 					end 				end 			end 		end  		ply.A_ActModOKAct = nil 		ply.A_ActModOKAct_r = nil 		ply.AGSped_f = 0 		ply.AGSped_b = 0 		for _, pl in pairs(player.GetAll()) do 			if IsValid(pl) and !pl:IsBot() then 				pl:ConCommand("actmod_wtc wtc_End ".. ply:EntIndex() .."\n") 			end 		end 	end 	 	if GetConVar("actmod_sy_tovs"):GetInt() == 1 or GetConVar("actmod_sy_tovs"):GetInt() == 3 then 		if CLIENT then 			ply.ActMod_RLAng = 0 			local cl_s, cl_e, cl_l = 0, 0, 0  			if GetConVarNumber("actmod_cl_sound") == 1 then 				ply:SetNWBool("A_ActMod_cl_Sound", true) 				cl_s = 1 			else 				ply:SetNWBool("A_ActMod_cl_Sound", false) 			end  			if GetConVarNumber("actmod_cl_effects") == 1 then 				ply:SetNWBool("A_ActMod_cl_Effects", true) 				cl_e = 1 			else 				ply:SetNWBool("A_ActMod_cl_Effects", false) 			end  			if GetConVarNumber("actmod_cl_loop") == 1 then 				ply:SetNWInt("A_ActMod_cl_Loop", 1) 				cl_l = 1 			elseif GetConVarNumber("actmod_cl_loop") == 2 then 				ply:SetNWInt("A_ActMod_cl_Loop", 2) 				cl_l = 2 			else 				ply:SetNWInt("A_ActMod_cl_Loop", 0) 			end 			 			if tabAgb and istable(tabAgb) then 				ply:SetEyeAngles(Angle(tabAgb[1],tabAgb[2],0)) 			elseif ply.ActMod_GeetAng ~= nil then 				ply:SetEyeAngles(ply.ActMod_GeetAng) 			elseif ply.ActMod_DetAng ~= nil then 				ply:SetEyeAngles(ply.ActMod_DetAng) 			end 			ply.ActMod_GeetAng = nil 			ply.ActMod_DetAng = nil 			ply.ActMod_BeetAng = nil  			if GetConVar("actmod_sy_tovs"):GetInt() == 3 then 				net.Start( "A_AM.ActMod.CToS_ST" ) 				 net.WriteEntity( NULL ) 				 net.WriteString( "CToS_" ) 				 net.WriteTable( {"wts_SEL",cl_s,cl_e,cl_l} ) 				net.SendToServer() 			else 				ply:ConCommand("actmod_wts wts_SEL " .. cl_s .. cl_e .. cl_l .. "\n") 			end 			ply:SetCycle(0) 			A_AM.ActMod.TauntCamera = nil 			ply.A_ActMod_GetDir = nil 			ply.AGSped_f = 0 			ply.AGSped_b = 0 		end 	end  	A_AM.ActMod:AA_RemoveAdd( ply ) end  function A_AM.ActMod:A_ActMod_GetOtherF( ply ) if ply:GetActiveWeapon() and ply:GetActiveWeapon():IsValid() and ply:GetActiveWeapon():GetClass() != "aact_weapact" then return true end if (prone and (ply:GetNW2Int("prone.AnimationState", 3) ~= 3 or ply:GetNWInt("prone.AnimationState", 3) ~= 3)) or (wOS and wOS.LastStand and ply:WOSGetIncapped()) or ply:GetNWBool( "wOS.LS.IsGetIncapped",false ) == true then return true end if ( ply:GetNWBool( "L4DA.IsHntrAttPly" ) == true or ply:GetNWBool( "L4DA.IsChargerAttPly" ) == true or ply:GetNWBool( "L4DA.IsJockeyAttPly" ) == true or ply:GetNWBool( "L4DA.IsSmokerAttPly" ) == true ) then return true end  return false end  function A_AM.ActMod:EndAnimation( ply ) A_AM.ActMod:A_ActMod_OffActing( ply ) end  function A_AM.ActMod:ResetAnimation( ply,str ) 	local astr = str or "" 	if str then ply:SetNWString( "A_ActMod.Dir", str ) end 	if GetConVar("actmod_sy_tovs"):GetInt() == 1 then 		if CLIENT then net.Start( "A_AM.ActMod.SvCallRestart" ) net.SendToServer() end 		if SERVER then 			ply:SetPlaybackRate( 1 ) ply:SetCycle( 0 ) ply:AnimRestartMainSequence() ply:SetCycle( 0 ) 			net.Start( "A_AM.ActMod.CallRestart" ) net.WriteEntity( ply ) net.Broadcast() 		end 	else 		if CLIENT then RunConsoleCommand("actmod_wts","CToS_SvCReA",ply:EntIndex()) end 		if SERVER then 			ply:SetPlaybackRate( 1 ) ply:SetCycle( 0 ) ply:AnimRestartMainSequence() ply:SetCycle( 0 ) 			for _, pl in pairs(player.GetAll()) do if IsValid(pl) and !pl:IsBot() then pl:ConCommand("actmod_wtc SToC_CReA ".. ply:EntIndex() .." ".. astr .."\n") end end 		end 	end end  function A_AM.ActMod:CycleAni( ply,cyer,svcyer,effe,mdl ) 	if SERVER then 		local EIx = "AA_TCyca"..ply:EntIndex() 		if timer.Exists( EIx ) then timer.Remove( EIx ) end 		local TEff = {} 		if effe then 			local OnEff 			local strg = ply:GetNWString("A_ActMod.Dir", "") 			if ply.ActMod_tAb and ply.ActMod_tAb[3] != nil then OnEff = ply.ActMod_tAb[3] end 			if GetConVarNumber("actmod_sv_enabled_addef") == 1 and ((OnEff and OnEff == 1) or !OnEff and ply:A_ActModEffects() == true) then 				if string.find(string.sub(strg,0 ,2), "f_") and !string.find(strg, "amod") then strg = string.Replace(strg,"f_","") end 				if GetConVar("actmod_sy_tovs_eff"):GetInt() == 2 and A_AM.ActMod:AA_TableBool( A_AM.ActMod.Ac_Geff, strg,true ) != true then 					local Awgin = "0" 					if effe then Awgin = "1" end 					TEff["strg"] = strg 					TEff["Awgin"] = Awgin 					if mdl then TEff["aRR"] = "1" else TEff["aRR"] = "0" end 				else 					A_AM.ActMod:AA_AddEffects(ply,effe,strg) 				end 			end 		end 		if GetConVar("actmod_sy_tovs"):GetInt() == 1 then 			if TEff and not table.IsEmpty(TEff) then 				net.Start( "A_AM.ActMod.CallCycleAEff" ) net.WriteEntity( ply ) net.WriteTable({cyer,TEff["strg"],TEff["Awgin"],TEff["aRR"]}) net.Broadcast() 			else 				net.Start( "A_AM.ActMod.CallCycle" ) net.WriteEntity( ply ) net.WriteFloat(cyer) net.Broadcast() 			end 		else 			local Tac = "none" 			if svcyer == nil then 				Tac = tostring(svcyer) 			end 			 			local TConCommand = "actmod_wtc SToC_CCyc ".. ply:EntIndex() .." ".. tostring(cyer) .." ".. Tac .."\n" 			if TEff and not table.IsEmpty(TEff) then TConCommand = "actmod_wtc SToC_CCycAndEff ".. ply:EntIndex() .." ".. tostring(cyer) .." ".. Tac .." ".. tostring(TEff["strg"]) .." ".. tostring(TEff["Awgin"]) .." ".. tostring(TEff["aRR"]) .."\n" end 			for _, pl in pairs(player.GetAll()) do 				if IsValid(pl) and !pl:IsBot() then 					pl:ConCommand( TConCommand ) 				end 			end 		end 		if svcyer then 			timer.Create(EIx,svcyer,1,function() if IsValid(ply) then ply:SetNWInt( "A_AM.ActCycle", cyer ) ply:SetCycle( cyer ) end end) 		else 			ply:SetNWInt( "A_AM.ActCycle", cyer ) ply:SetCycle( cyer ) 			if !game.SinglePlayer() and !ply.ActMod_JOne then 				timer.Create(EIx,0.001,1,function() if IsValid(ply) then ply:SetNWInt( "A_AM.ActCycle", cyer ) ply:SetCycle( cyer ) end end) 			end 		end 	end end    function A_AM.ActMod:GiveWeapAct( ply,GNewt,TiHoBase ) 	if SERVER then 		local gonwh = false 		local function GivWo(nnw) 		if nnw then 			local actwep = ply:GetActiveWeapon() 			local giveweapatt = "aact_weapact" 			ply.A_oldWeap = IsValid(actwep) and actwep:GetClass() 			if ply.A_oldWeap then ply:SetNWString( "A_AM.ActMod.GetWeap", ply.A_oldWeap ) end 			if ply:HasWeapon(giveweapatt) then 				ply:SelectWeapon(giveweapatt) 			else 				local ent = ents.Create(giveweapatt) 				if IsValid(ent) then ply.A_oldWeap = IsValid(actwep) and actwep:GetClass() 				if ply.A_oldWeap then ply:SetNWString( "A_AM.ActMod.GetWeap", ply.A_oldWeap ) end 				ent:SetPos(ply:GetPos()) 				ent.GiveTo = ply 				ent:Spawn() 				ent.GiveTo = ply 				ply:SelectWeapon(giveweapatt) 				timer.Simple(0.05, function() if IsValid(ply) then ply:SelectWeapon(giveweapatt) 				timer.Simple(0.01, function() if IsValid(ply) then ply:SelectWeapon(giveweapatt) 				timer.Simple(0.0, function() if IsValid(ply) then ply:SelectWeapon(giveweapatt) end end) end end) end end) 				end 				ply:SelectWeapon(giveweapatt) 			end 			 			timer.Simple(0.1, function() 				if IsValid(ply) then 					if GNewt and ply:GetActiveWeapon() and ply:GetActiveWeapon():IsValid() then 						for l, wep in pairs(ply:GetWeapons()) do 							if wep:IsValid() and wep:GetClass() == "aact_weapact" then 								gonwh = true 								wep:Onweap(ply,TiHoBase or 0.1) 							end 						end 					elseif ply:GetActiveWeapon() and ply:GetActiveWeapon():IsValid() and ply:GetActiveWeapon():GetClass() == "aact_weapact" then 						gonwh = true 					end 					if gonwh == true then 						ply:SetNWBool( "A_AM.ActMod.IsAct", true ) 					else 						net.Start( "A_AM.ActMod.iError_cl" ) net.WriteString( "nwp" ) net.Send(ply) 					end 				end 			end)  		else 		 			local actwep = ply:GetActiveWeapon() 			local giveweapatt = "aact_weapact" 			if actwep == NULL or actwep:GetClass() != giveweapatt then 				ply.A_oldWeap = IsValid(actwep) and actwep:GetClass() 				if ply.A_oldWeap then ply:SetNWString( "A_AM.ActMod.GetWeap", ply.A_oldWeap ) end 				if ply:HasWeapon(giveweapatt) then 					ply:SelectWeapon(giveweapatt) 				else 					ply:Give(giveweapatt) 					ply:SelectWeapon(giveweapatt) 				end 			elseif ply.A_oldWeap then 				ply:SelectWeapon(ply.A_oldWeap) 				ply:SetNWString( "A_AM.ActMod.GetWeap", "" ) 				ply.A_oldWeap = nil 			end 	 			if GNewt and ply:GetActiveWeapon() and ply:GetActiveWeapon():IsValid() then 				for l, wep in pairs(ply:GetWeapons()) do if wep:IsValid() and wep:GetClass() == "aact_weapact" then gonwh = true  wep:Onweap(ply,TiHoBase or 0.1) end end 				elseif ply:GetActiveWeapon() and ply:GetActiveWeapon():IsValid() and ply:GetActiveWeapon():GetClass() == "aact_weapact" then gonwh = true 			end 				if gonwh == true then ply:SetNWBool( "A_AM.ActMod.IsAct", true ) else GivWo(true) end 			end  		end 		GivWo() 	end end  function A_AM.ActMod:StartAniEnt( ply,strg,agin ) 	if ply:GetActiveWeapon() and ply:GetActiveWeapon():IsValid() and ply:GetActiveWeapon():GetClass() == "aact_weapact" then 		if GetConVar("actmod_sy_tovs_strfast"):GetInt() ~= 1 then A_AM.ActMod:AA_RemoveAdd( ply ) end 		if ( ply:GetNWBool( "A_AM.ActMod.SqAct", false ) == true and (GetConVar("actmod_sy_tovs_mmdfast"):GetInt() == 1 or GetConVar("actmod_sy_tovs_mmdfast"):GetInt() == 0 and ply.A_ActModOKAct) ) or ply:GetNWBool( "A_AM.ActMod.SqAct", false ) == false then 			A_AM.ActMod:AA_GetActAddEnt( ply,strg,agin,nil ) 		end 	end end  local function ActMod_S_Stop(pl_) A_AM.ActMod:A_ActMod_OffActing( pl_ ) end local function ActMod_S_SyAnim(pl_) if A_AM.ActMod.LuaSAnim then A_AM.ActMod.SyAnim.GoStartAnim(pl_,pl_.ActMod_Cum) end end   function A_AM.ActMod:gostrt(pl_,str,reS,aTab2) 	if pl_:GetNWInt( "A_ActMod.MoveDir", 0 ) > 0 then pl_.ActMod_ROne = 0.1 end 	if pl_.ActMod_ROne then 		if A_AM.ActMod:ATabData( A_AM.ActMod.AnimNStp, str ) == true then 			ActMod_S_SyAnim(pl_) 			if GetConVar("actmod_sy_tovs_strfast"):GetInt() == 1 and pl_.ActMod_SFast == true then 				A_AM.ActMod:StartAniAct( pl_,str,reS,aTab2 ) 				pl_.ActMod_SFast = nil 			else 				if !reS then A_AM.ActMod:ResetAnimation( pl_,str ) end 				A_AM.ActMod:StartAniAct( pl_,str,reS,aTab2 ) 				A_AM.ActMod:StartAniEnt( pl_,str,reS ) 			end 		else 			if timer.Exists( "AA_TJOne"..pl_:EntIndex() ) then timer.Remove( "AA_TJOne"..pl_:EntIndex() ) end 			A_AM.ActMod:ResetAnimation( pl_,str ) 			timer.Create("AA_TJOne"..pl_:EntIndex(),pl_.ActMod_ROne,1,function() 				if IsValid( pl_ ) then 					ActMod_S_SyAnim(pl_) 					if GetConVar("actmod_sy_tovs_strfast"):GetInt() == 1 and pl_.ActMod_SFast == true then 						A_AM.ActMod:StartAniAct( pl_,str,reS,aTab2 ) 						pl_.ActMod_SFast = nil 					else 						A_AM.ActMod:ResetAnimation( pl_,str ) 						A_AM.ActMod:StartAniAct( pl_,str,reS,aTab2 ) 						A_AM.ActMod:StartAniEnt( pl_,str,reS ) 					end 				end 			end) 		end 		pl_.ActMod_ROne = nil 	elseif pl_.ActMod_JOne then 		ActMod_S_SyAnim(pl_) 		if GetConVar("actmod_sy_tovs_strfast"):GetInt() == 1 and pl_.ActMod_SFast == true then 			A_AM.ActMod:StartAniAct( pl_,str,reS,aTab2 ) 			pl_.ActMod_SFast = nil 		else 			if !reS then A_AM.ActMod:ResetAnimation( pl_,str ) end 			A_AM.ActMod:StartAniAct( pl_,str,reS,aTab2 ) 			A_AM.ActMod:StartAniEnt( pl_,str,reS ) 		end 	else 		if timer.Exists( "AA_TJOne"..pl_:EntIndex() ) then timer.Remove( "AA_TJOne"..pl_:EntIndex() ) end 		timer.Create("AA_TJOne"..pl_:EntIndex(),0.1,1,function() 			if IsValid( pl_ ) then 				ActMod_S_SyAnim(pl_) 				if GetConVar("actmod_sy_tovs_strfast"):GetInt() == 1 and pl_.ActMod_SFast == true then 					A_AM.ActMod:StartAniAct( pl_,str,reS,aTab2 ) 					pl_.ActMod_SFast = nil 				else 					if !reS then A_AM.ActMod:ResetAnimation( pl_,str ) end 					A_AM.ActMod:StartAniAct( pl_,str,reS,aTab2 ) 					A_AM.ActMod:StartAniEnt( pl_,str,reS ) 				end 			end 		end) 	end 	pl_.ActMod_JOneed = true end  function A_AM.ActMod:ActMod_SSTr(pl_,st_,reanim,aTab2) 	local ply = pl_ 	local ActMod_GStrg = st_  	if IsValid(ply) then 
		local function str_iError(pl_,str) 			net.Start( "A_AM.ActMod.iError_cl" ) net.WriteString( str ) net.Send(pl_) 		end 		 		if ply:InVehicle() then ActMod_S_Stop(ply) str_iError(ply,"!T_.1iCantUse_inVehicle") return end 		if !ply:OnGround() then ActMod_S_Stop(ply) str_iError(ply,"!T_.1iCantUse_notFloor") return end 		if ply:Crouching() then ActMod_S_Stop(ply) str_iError(ply,"!T_.1iCantUse_Crouching") return end 		if (prone and (ply:GetNW2Int("prone.AnimationState", 3) ~= 3 or ply:GetNWInt("prone.AnimationState", 3) ~= 3)) then ActMod_S_Stop(ply) str_iError(ply,"!T_.1iCantUse_prone") return end 		if (wOS and wOS.LastStand and ply:WOSGetIncapped()) or ply:GetNWBool( "wOS.LS.IsGetIncapped",false ) == true then ActMod_S_Stop(ply) str_iError(ply,"!T_.1iCantUse_helpless") return end 		if (wOS and wOS.RollMod and ply:wOSIsRolling()) then ActMod_S_Stop(ply) str_iError(ply,"!T_.1iCantUse_rolling") return end 		 		ActMod_GStrg = ply:A_ActMod_GetActString(st_) 		ply.ActMod_GStrg = ActMod_GStrg  		if hook.Call("CanUseActMod",nil,ply,ActMod_GStrg) == false then ActMod_S_Stop(ply) if ply.ActMod_Strgi1 then 		str_iError(ply,"!S_.1".. ply.ActMod_Strgi1) ply.ActMod_Strgi1 = nil end if ply.ActMod_Strgi2 then 		str_iError(ply,"!S_.2".. ply.ActMod_Strgi2) ply.ActMod_Strgi2 = nil end if ply.ActMod_StrgError then 		str_iError(ply,ply.ActMod_StrgError .." ") ply.ActMod_StrgError = nil end return end  		if !ply:IsBot() then 		if (string.find(string.sub(ActMod_GStrg,1 ,2), "f_") or string.find(ActMod_GStrg, "original_dance")) then 		if ply:GetNWBool( "A_ActMod.GetMDLTr_SXdr", false ) == false and ply:GetNWBool( "A_ActMod.GetSeqTr_ECTE", false ) == false then ActMod_S_Stop(ply) str_iError(ply,"bse") return end 		if ply:GetNWBool( "A_ActMod.GetSeqTr_base", false ) == false and ply:GetNWBool( "A_ActMod.GetSeqTr_ECTE", false ) == false then ActMod_S_Stop(ply) str_iError(ply,"ynbse") return end 		if A_AM.ActMod.Mounted[ "GetSeqTr_SV_Base" ] != true and A_AM.ActMod.Mounted[ "GetSeqTr_SV_ECTE" ] != true then ActMod_S_Stop(ply) str_iError(ply,"svbse") return end 		if ply:GetNWBool( "A_ActMod.GetMDLTr_CTE", false ) == false then ActMod_S_Stop(ply) str_iError(ply,"ae") return end 		if ply:GetNWBool( "A_ActMod.GetSeqTr_ECTE", false ) == false then ActMod_S_Stop(ply) str_iError(ply,"ynae") return end 		if A_AM.ActMod.Mounted[ "GetSeqTr_SV_ECTE" ] != true then ActMod_S_Stop(ply) str_iError(ply,"svae") return end 		elseif string.find(ActMod_GStrg, "wos_tf2_") then 		if ply:GetNWBool( "A_ActMod.GetMDLTr_SXdr", false ) == false and ply:GetNWBool( "A_ActMod.GetSeqTr_ETF2", false ) == false then ActMod_S_Stop(ply) str_iError(ply,"bse") return end 		if ply:GetNWBool( "A_ActMod.GetSeqTr_base", false ) == false and ply:GetNWBool( "A_ActMod.GetSeqTr_ETF2", false ) == false then ActMod_S_Stop(ply) str_iError(ply,"ynbse") return end 		if ply:GetNWBool( "A_ActMod.GetMDLTr_TF2", false ) == false then ActMod_S_Stop(ply) str_iError(ply,"bs_tf2") return end 		if ply:GetNWBool( "A_ActMod.GetSeqTr_ETF2", false ) == false then ActMod_S_Stop(ply) str_iError(ply,"etf2") return end 		if A_AM.ActMod.Mounted[ "GetSeqTr_SV_TF2" ] != true then ActMod_S_Stop(ply) str_iError(ply,"sv_bs_tf2") return end 		elseif (string.find(ActMod_GStrg, "amod_") or string.find(ActMod_GStrg, "amod_mmd_")) then 		if ply:GetNWBool( "A_ActMod.GetMDLTr_BAM4", false ) == false then ActMod_S_Stop(ply) str_iError(ply,"bs_am4") return end 		if ply:GetNWBool( "A_ActMod.GetSeqTr_BaseAM4", false ) == false then ActMod_S_Stop(ply) str_iError(ply,"eam4") return end 		if A_AM.ActMod.Mounted[ "GetSeqTr_SV_BAM4" ] != true then ActMod_S_Stop(ply) str_iError(ply,"sv_bs_am4") return end 		if ply:GetNWBool( "A_ActMod.GetMDLTr_Pack", false ) == false then ActMod_S_Stop(ply) str_iError(ply,"pkam4") return end 		if ply:GetNWBool( "A_ActMod.GetSeqTr_EAM4", false ) == false then ActMod_S_Stop(ply) str_iError(ply,"epkam4") return end 		if A_AM.ActMod.Mounted[ "GetSeqTr_SV_EAM4" ] != true then ActMod_S_Stop(ply) str_iError(ply,"sv_pk_am4") return end 		end 		if ply:A_ActModSound() == true and string.find(st_, "._so_.") != nil then 		if string.find(ActMod_GStrg, "original_dance") and ply:GetNWBool( "A_ActMod.GetSodTr_CTM", false ) == false then str_iError(ply,"cmt") end 		if (string.find(ActMod_GStrg, "f_") or string.find(ActMod_GStrg, "amod_")) and ply:GetNWBool( "A_ActMod.GetSodTr_Pack", false ) == false then str_iError(ply,"pkso") end 		end 		local seq = ply:LookupSequence( ActMod_GStrg ) 		if ActMod_GStrg != "ragdoll" and not string.find(ActMod_GStrg, "amod_cum_") and seq <= 0 then ActMod_S_Stop(ply) str_iError(ply,game.SinglePlayer() and "!T_.0iCantUse_missing2" or "!T_.0iCantUse_missing") return end 		end 		if string.sub(ActMod_GStrg,1,9 ) == "amod_cum_" then 			ply.ActMod_Cum = ActMod_GStrg 			ActMod_GStrg = "walk_suitcase" 			ply.ActMod_GStrg = ActMod_GStrg 		else 			ply.ActMod_Cum = nil 		end  		if reanim then 			A_AM.ActMod:gostrt(ply,ActMod_GStrg,true,aTab2) 		else 			if ply:A_ActMod_OnNormal() then 				A_AM.ActMod:gostrt(ply,ActMod_GStrg,nil,aTab2) 			else 				local GetTBase = "non" 				local TiHoBase 				if ply:GetActiveWeapon() and ply:GetActiveWeapon():IsValid() and ply:GetActiveWeapon():GetClass() != "aact_weapact" then 					GetTBase = ply:GetActiveWeapon().Base or "non" 				end 				if GetTBase != "non" then 					pcall(function() 						if GetTBase == "arccw_base" then TiHoBase = 0.4 + (0.25 *ply:GetActiveWeapon():GetBuff_Mult("Mult_HolsterTime")) 						elseif string.find( GetTBase, "arc9_base*" ) then TiHoBase = 1.8 						elseif string.find( GetTBase, "mg_base*" ) then TiHoBase = 0.8 						elseif string.find( GetTBase, "base_iw4" ) or string.find( GetTBase, "base_iw3" ) then 							TiHoBase = 1.5 + (ply:GetActiveWeapon():GetStat("ProceduralHolsterTime") / ply:GetActiveWeapon():GetAnimationRate(ACT_VM_HOLSTER)) 						elseif string.find( GetTBase, "tfa_*" ) then 							TiHoBase = 0.5 + (ply:GetActiveWeapon():GetStat("ProceduralHolsterTime") / ply:GetActiveWeapon():GetAnimationRate(ACT_VM_HOLSTER)) 						end 					end) 					if not TiHoBase then TiHoBase = 2.5 end 				else 					TiHoBase = 0.3 				end if TiHoBase then TiHoBase = TiHoBase+1 end 				GetTBase = nil 				if timer.Exists( "AA_TStratA"..ply:EntIndex() ) then timer.Remove( "AA_TStratA"..ply:EntIndex() ) end 				A_AM.ActMod:GiveWeapAct( ply,true,TiHoBase ) 				if TiHoBase != nil then 					timer.Create("AA_TStratA"..ply:EntIndex(),TiHoBase,1,function() if IsValid( ply ) then 						A_AM.ActMod:gostrt(ply,ActMod_GStrg,nil,aTab2) 						TiHoBase = nil 					end end) 				else 					timer.Create("AA_TStratA"..ply:EntIndex(),0.2,1,function() if IsValid( ply ) then 						A_AM.ActMod:gostrt(ply,ActMod_GStrg,nil,aTab2) 					end end) 				end 			end 		end 	end end     if SERVER then  	function A_AM.ActMod:APlayerInitial(ply,tim) 		ply.ActMod_Table_Ply = {} 		ply.AGSped_f = 0 		ply.AGSped_b = 0 		timer.Create("AA_PlayerInitialSpawn",tim or 4,1,function() 			if IsValid(ply) and !ply:IsBot() then 				local ttx = "" 				if ply:IsListenServerHost() then ttx = "isHost" end 				net.Start( "A_AM.ActMod.SvToCl_restuo" ) net.WriteString( ttx ) net.Send(ply) 			end 		end) 	end  	local function AClToSv(ply,txt) 		if IsValid( ply ) then 			if txt == "AddThink_Ply" then A_AM.ActMod.HookThinkCl = A_AM.ActMod.HookThinkCl + 1 			elseif txt == "E_ IN_FORWARD" then ply.TimeGo_FORWARD = CurTime() + 0.7 if ply.AalowAnim then A_AM.ActMod:ChingAni(ply,1) end 			elseif txt == "E_ IN_BACK" then ply.TimeGo_BACK = CurTime() + 0.7 			elseif txt == "E_ IN_ATTACK" then A_AM.ActMod:ChingAni(ply) 			elseif txt == "E_ IN_ATTACKand" then A_AM.ActMod:ChingAni(ply,true) 			elseif txt == "E_ StopFORWARD" then ply.TimeGo_FORWARD = CurTime() ply.TimeGo_BACK = CurTime() if ply.AalowAnim then A_AM.ActMod:ChingAni(ply,0) end 			elseif ply:IsListenServerHost() and string.sub(txt,1,10) == "CHangeMap_" then RunConsoleCommand("changelevel",string.sub(txt,12)) 			end 		end 	end 	net.Receive( "A_AM.ActMod.ClToSv", function(len, ply) if IsValid( ply ) then AClToSv(ply,net.ReadString()) end end) 	net.Receive( "A_AM.SC_T_PlyP_ToSv", function() 	local ply = net.ReadEntity() 	local ply2 = net.ReadEntity() 	local txt = net.ReadString() 	local RTable = net.ReadTable() 	local STxt,ToPly 		if IsValid( ply ) and IsValid( ply2 ) then 			if txt == "GetTableFromPly" then  STxt = "GetTableFromPly_ToPly2"  ToPly = ply2 			elseif txt == "GetTableFromPly_ToPly1" then STxt = "GetTableFromPly_ToPly1_Finsh"  ToPly = ply 			elseif txt == "GetTabiPly_1To2_Start" then STxt = "GetTabiPly_1To2"  ToPly = ply2 			elseif txt == "GetTabiPly_2To1" then STxt = "GetTabiPly_Finsh"  ToPly = ply 			 			elseif txt == "GetTabiPly_Avs_Get_1To2" then STxt = "GetTabiPly_Avs_Get_Start"  ToPly = ply2 			elseif txt == "GetTabiPly_Avs_Get_2To1" then STxt = "GetTabiPly_Avs_Get_Finsh"  ToPly = ply 			elseif txt == "GetTabiPly_Avs_Set_1To2" then STxt = "GetTabiPly_Avs_Set_Start"  ToPly = ply2 			elseif txt == "GetTabiPly_Avs_Set_2To1" then STxt = "GetTabiPly_Avs_Set_Finsh"  ToPly = ply  			end 			if STxt then 			net.Start( "A_AM.SC_T_PlyP_ToCl" ) net.WriteEntity( ply ) net.WriteEntity( ply2 ) net.WriteString( STxt ) net.WriteTable( RTable ) net.Send(ToPly) 			end 		end 	end)  	net.Receive("A_AM.ActMod.ClToSv_OkAct", function( len, ply ) 		local pl = net.ReadEntity() 		if IsValid(ply) and ply == pl then ply.A_ActModOKAct = true end 	end)  	net.Receive("A_AM.ActMod.AngEyeP", function( len, ply ) 		local aang = net.ReadAngle() 		local dang = net.ReadAngle() 		local tang = net.ReadBool() 		if IsValid(ply) and ply:A_ActMod_IsActing() then 			ply.ActMod_GeetAng = aang 			ply.ActMod_DetAng = dang 			ply.ActMod_BeetAng = tang 		end 	end) 	net.Receive("A_AM.ActMod.CancelCamera", function( len, ply ) 		local able = net.ReadTable() 		if IsValid(ply) and ply:A_ActMod_IsActing() then 			if able then 				A_AM.ActMod:A_ActMod_OffActing( ply,able ) 			else 				A_AM.ActMod:A_ActMod_OffActing( ply ) 			end 		end 	end) 	net.Receive( "A_AM.ActMod.SvCallRestart", function( len, ply ) 		if IsValid( ply ) then ply:SetCycle( 0 ) ply:AnimRestartMainSequence() end 	end ) 	net.Receive("A_AM.ActMod.iError_sv", function(len, ply) 		local GetStrg = net.ReadString() 		net.Start( "A_AM.ActMod.iError_cl" ) net.WriteString( GetStrg ) net.Send(ply) 	end ) 	net.Receive("A_AM.ActMod.ClToSv_sound", function(len, plye) 		local ply = net.ReadEntity() 		local okts = net.ReadBool() 		if IsValid( ply ) then ply:SetNWBool("A_ActMod_cl_Sound",okts) 		if ply.AAct_S1 and okts != true then ply.AAct_S1:Stop() ply.AAct_S1 = nil end 		if ply.AAct_S2 and okts != true then ply.AAct_S2:Stop() ply.AAct_S2 = nil end 		end 	end ) 	net.Receive("A_AM.ActMod.ClToSv_Effects", function(len, plye) 		local ply = net.ReadEntity() 		local okts = net.ReadBool() 		if IsValid( ply ) then ply:SetNWBool("A_ActMod_cl_Effects",okts) end 	end ) 	net.Receive("A_AM.ActMod.ClToSv_loop", function(len, plye) 		local ply = net.ReadEntity() 		local okts = net.ReadFloat() 		if IsValid( ply ) then ply:SetNWInt("A_ActMod_cl_Loop",okts) end 	end ) 	net.Receive( "A_AM.ActMod.ClToSv_ReTast", function(len, ply) 		local ttrue = net.ReadString() 		if IsValid( ply ) then A_AM.ActMod:ReTast_Seq_restuo(ply,ttrue) end 	end) 	net.Receive( "A_AM.ActMod.ClToSv_restuo", function() 		local ply = net.ReadEntity() 		local gstr = net.ReadString() 		local gyas = net.ReadBool() 		if IsValid( ply ) then 			ply:SetNWBool( gstr, gyas ) 			net.Start( "A_AM.ActMod.SetTCl_NWBool" ) net.WriteEntity( ply ) net.WriteString( gstr.."__cl" ) net.WriteBool( gyas ) net.Send(ply) 		end 	end) 	net.Receive( "A_AM.ActMod.ClToSv_NWBool", function() 		local ply = net.ReadEntity() 		local gstr1 = net.ReadString() 		local gstr2 = net.ReadString() 		local GetT = false 		if IsValid( ply ) then 			if A_AM.ActMod.Mounted[ gstr1 ] == true then GetT = true end 			net.Start( "A_AM.ActMod.SetTCl_NWBool" ) net.WriteEntity( ply ) net.WriteString( gstr2 ) net.WriteBool( GetT ) net.Send(ply) 		end 	end)   	local function AAStart(ply,GetStrg,tAb,Oall,GHold) 		ply.AGSped_f = 0 		ply.AGSped_b = 0 		ply:SetNWInt( "ply.AGSped_f",ply.AGSped_f ) 		if ply.OnTry__SvToCl_restuo == nil and !ply:IsBot() then 			local ActMod_GStig = ply:A_ActMod_GetActString(GetStrg) 			if (string.find(ActMod_GStig, "f_") or string.find(ActMod_GStig, "original_dance")) 			and ( (ply:GetNWBool( "A_ActMod.GetMDLTr_SXdr", false ) == false and ply:GetNWBool( "A_ActMod.GetSeqTr_ECTE", false ) == false) 			or (ply:GetNWBool( "A_ActMod.GetSeqTr_base", false ) == false and ply:GetNWBool( "A_ActMod.GetSeqTr_ECTE", false ) == false) 			or (ply:GetNWBool( "A_ActMod.GetMDLTr_CTE", false ) == false) or (ply:GetNWBool( "A_ActMod.GetMDLTr_TF2", false ) == false) 			or (ply:GetNWBool( "A_ActMod.GetSeqTr_ETF2", false ) == false) or (ply:GetNWBool( "A_ActMod.GetSeqTr_ECTE", false ) == false) ) 			or (string.find(ActMod_GStig, "amod_") or string.find(ActMod_GStig, "amod_mmd_")) 			and ( (ply:GetNWBool( "A_ActMod.GetMDLTr_BAM4", false ) == false and ply:GetNWBool( "A_ActMod.GetSeqTr_EAM4", false ) == false) 			or (ply:GetNWBool( "A_ActMod.GetSeqTr_BaseAM4", false ) == false and ply:GetNWBool( "A_ActMod.GetSeqTr_EAM4", false ) == false) 			or (ply:GetNWBool( "A_ActMod.GetMDLTr_Pack", false ) == false) 			or (ply:GetNWBool( "A_ActMod.GetSeqTr_EAM4", false ) == false) ) then 				ply.OnTry__SvToCl_restuo = true 				return 			end 		end 		 		 		ply.SVAct_Svsound = nil 		if GetConVar("actmod_sy_tovs_strfast"):GetInt() == 1 then 			ply.ActMod_SFast = true 			A_AM.ActMod:AA_RemoveAdd( ply,true,true ) 		end 		if tAb then ply.ActMod_tAb = tAb else ply.ActMod_tAb = nil end 		if Oall then ply.ActMod_Oall = Oall else ply.ActMod_Oall = nil end 		if GHold then 			ply.ActMod_GHold = GHold 			if ply:A_ActMod_IsActing() then 				A_AM.ActMod:A_ActMod_OffActing( ply,true ) 			else 				ply:SetNWString("A_ActMod_cl_actLoop","") 				A_AM.ActMod:GiveWeapAct( ply,true,GHold-0.1 ) 			end 				if timer.Exists( "AA_TStratA"..ply:EntIndex() ) then timer.Remove( "AA_TStratA"..ply:EntIndex() ) end 				timer.Create("AA_TStratA"..ply:EntIndex(),GHold,1,function() 					if IsValid( ply ) then 						if GetConVar("actmod_sy_tovs_strfast"):GetInt() == 1 then 							ply.ActMod_SFast = true 							A_AM.ActMod:AA_RemoveAdd( ply,true ) 						end 						ply:SetNWString("A_ActMod_cl_actLoop",GetStrg) 						A_AM.ActMod:ActMod_SSTr(ply,GetStrg,nil) 					end 				end) 		else 			ply.ActMod_GHold = nil 			ply:SetNWString("A_ActMod_cl_actLoop",GetStrg) 			A_AM.ActMod:ActMod_SSTr(ply,GetStrg,nil) 		end 	end  	hook.Add("ActMod_CStart", "AA_StartAct", function(Tbl,tAb,Oall,GHold) 		if Tbl then 			if Tbl[1] == "Player" and Tbl[2] and IsValid(Tbl[2]) and Tbl[2]:IsPlayer() then 				AAStart(Tbl[2],tAb[1],tAb,Oall,GHold) 			elseif Tbl[1] == "SetPlayers" and Tbl[2] then 				for _, pl in pairs(player.GetAll()) do if IsValid(pl) and A_AM.ActMod:ATabData( Tbl[2], pl ) == true then AAStart(pl,tAb[1],tAb,Oall,GHold) end end 			elseif Tbl[1] == "AllPlayers" then 				for _, pl in pairs(player.GetAll()) do if IsValid(pl) then AAStart(pl,tAb[1],tAb,Oall,GHold) end end 			end 		end 	end) 	 	net.Receive("A_AM.ActMod.Start", function(len, plye) 		if GetConVar("actmod_sy_tovs"):GetInt() == 1 and IsValid(plye) and plye:IsPlayer() then AAStart(plye,net.ReadString()) end 	end)  	local function Commt_Sv(ply,args) 		if args[1] == "wts" then 			if args[3] == "1" then 				ply:SetNWBool("A_ActMod_cl_Sound", true) 			else 				ply:SetNWBool("A_ActMod_cl_Sound", false) 			end 			if args[4] == "1" then 				ply:SetNWBool("A_ActMod_cl_Effects", true) 			else 				ply:SetNWBool("A_ActMod_cl_Effects", false) 			end 			if args[5] == "1" then 				ply:SetNWInt("A_ActMod_cl_Loop", 1) 			elseif args[5] == "2" then 				ply:SetNWInt("A_ActMod_cl_Loop", 2) 			else 				ply:SetNWInt("A_ActMod_cl_Loop", 0) 			end 			AAStart(ply,args[2]) 		elseif args[1] == "CToS_SvAOK" then 			ply.A_ActModOKAct = true 		elseif args[1] == "CToS_SvCTSvr" then 			local pl = Entity( args[2] ) 			local npr = tonumber(args[3]) or 0 			if IsValid(pl) then pl.ActMod_TabTSrvr = npr end 		elseif args[1] == "CToS_SvCReA" then 			local pl = Entity( args[2] ) 			if IsValid(pl) then pl:SetCycle( 0 ) pl:AnimRestartMainSequence() end 		elseif args[1] == "wts_SCTS" then AClToSv(ply,args[2]) 		elseif args[1] == "wts_SEL" then 			ply:SetNWBool("A_ActMod_cl_Sound",tobool(string.sub(args[2],1,1))) 			ply:SetNWBool("A_ActMod_cl_Effects",tobool(string.sub(args[2],2,2))) 			ply:SetNWInt("A_ActMod_cl_Loop",tonumber(string.sub(args[2],3 ,3))) 		elseif args[1] == "CToS_Sond" then ply:SetNWBool("A_ActMod_cl_Sound",tobool(args[2])) 			for _, pl in pairs(player.GetAll()) do if IsValid(pl) and !pl:IsBot() then pl:ConCommand("actmod_wtc CToS_Sond ".. ply:EntIndex() .."\n") end end 		elseif args[1] == "CToS_Effe" then ply:SetNWBool("A_ActMod_cl_Effects",tobool(args[2])) 		elseif args[1] == "CToS_Loop" then ply:SetNWInt("A_ActMod_cl_Loop",tonumber(args[2])) 		elseif args[1] == "wts_End" then 			if args[2] and args[3] then 				A_AM.ActMod:A_ActMod_OffActing( ply ,nil,{tonumber( args[2] ),tonumber( args[3] )} ) 			else 				A_AM.ActMod:A_ActMod_OffActing( ply ) 			end 		end 	end  	net.Receive( "A_AM.ActMod.CToS_ST", function(len, ply) 		local plt = net.ReadEntity() 		local str = net.ReadString() 		local tbl = net.ReadTable() 		if str == "CToS_" then 			if IsValid(ply) then 				Commt_Sv(ply,tbl) 			end 		end 	end )  	concommand.Add("actmod_wts", function(ply, cmd, args) 		if GetConVar("actmod_sy_tovs"):GetInt() != 1 and IsValid(ply) and ply:IsPlayer() then 			Commt_Sv(ply,args) 		end 	end)   	function A_AM.ActMod.Think() 		for _, pl in pairs(player.GetAll()) do 			if IsValid(pl) then 				if pl:A_ActMod_IsActing() then 					if not pl:OnGround() then A_AM.ActMod:A_ActMod_OffActing( pl ) end 					if pl.AalowAnim then A_AM.ActMod:ThinkChingAni(pl) end 					if pl.AAct_Eff then 						for k, v in pairs(pl.AAct_Eff) do 							if v["ents"] and v["ents"] != NULL and IsValid(v["ents"]) then 								v["ents"]:SetPos( pl:GetBonePosition(v["B_"]) ) 							end 						end 					end 					if A_AM.ActMod:A_ActMod_GetOtherF( pl ) == true then 						A_AM.ActMod:EndAnimation( pl ) 					end 				else 					if pl:GetActiveWeapon() and pl:GetActiveWeapon():IsValid() and pl:HasWeapon("aact_weapact") then 						if pl:GetActiveWeapon():GetClass() == "aact_weapact" and pl.ActMod_GStrg != "" and !pl.ActMod_JOneed then 							if timer.Exists( "AA_TStratA"..pl:EntIndex() ) then timer.Remove( "AA_TStratA"..pl:EntIndex() ) end 							A_AM.ActMod:gostrt(pl,pl.ActMod_GStrg,nil,aTab2) 						elseif pl:GetActiveWeapon():GetClass() != "aact_weapact" then 							pl:SelectWeapon("aact_weapact") 							if pl:GetActiveWeapon():GetClass() == "aact_weapact" and pl.ActMod_GStrg != "" and !pl.ActMod_JOneed then 								if timer.Exists( "AA_TStratA"..pl:EntIndex() ) then timer.Remove( "AA_TStratA"..pl:EntIndex() ) end 								A_AM.ActMod:gostrt(pl,pl.ActMod_GStrg,nil,aTab2) 							end 						end 					end 				end 			end 		end 	end  end  A_AM.ActMod.ActLck = { 	["Avs_a1_1"] = { ["T1"]= "amod_fortnite_rememberme._so_..png" ,["T2"]= "" } 	,["Avs_a1_2"] = { ["T1"]= "amod_fortnite_tonal._so_..png" ,["T2"]= "" } 	,["Avs_a1_3"] = { ["T1"]= "amod_mmd_followtheleader._so_..png" ,["T2"]= "un1412" } 	,["Avs_a2_1"] = { ["T1"]= "amod_fortnite_dance_distraction._so_..png" ,["T2"]= "" } 	,["Avs_a2_2"] = { ["T1"]= "amod_fortnite_zebrascramble._so_..png" ,["T2"]= "" } 	,["Avs_a2_3"] = { ["T1"]= "amod_fortnite_zest._so_..png" ,["T2"]= "" } 	,["Avs_a2_4"] = { ["T1"]= "amod_mmd_dance_nostalogic._so_..png" ,["T2"]= "un421" } 	,["Avs_a2_5"] = { ["T1"]= "amod_mmd_s007._so_..png" ,["T2"]= "" } 	,["Avs_a2_6"] = { ["T1"]= "amod_mmd_phao2phuthon_p1._so_..png" ,["T2"]= "" } 	,["Avs_a2_7"] = { ["T1"]= "amod_mmd_nyaarigato._so_..png" ,["T2"]= "" } 	,["Avs_a2_8"] = { ["T1"]= "amod_fortnite_griddle._so_..png" ,["C1"]= "amod_fortnite_griddle_walk._so_..png" ,["T2"]= "" } 	,["Avs_a2_9"] = { ["T1"]= "amod_fortnite_walkywalk._so_..png" ,["C1"]= "amod_fortnite_walkywalk_walk._so_..png" ,["T2"]= "" } 	,["Avs_a3_1"] = { ["T1"]= "amod_fortnite_sunlit._so_..png" ,["T2"]= "un85" } 	,["Avs_a3_2"] = { ["T1"]= "amod_mmd_ghostdance._so_..png" ,["T2"]= "" } 	,["Avs_a3_3"] = { ["T1"]= "amod_mmd_chikichiki._so_..png" ,["T2"]= "" } 	,["Avs_a3_4"] = { ["T1"]= "amod_mmd_hiasobi._so_..png" ,["T2"]= "" } 	,["Avs_a3_5"] = { ["T1"]= "amod_fortnite_twistwasp._so_..png" ,["T2"]= "" } 	,["Avs_a3_6"] = { ["T1"]= "amod_mmd_kemuthree._so_..png" ,["T2"]= "" } 	,["Avs_a3_7"] = { ["T1"]= "amod_pubg_seetinh._so_..png" ,["T2"]= "" } 	,["Avs_a3_8"] = { ["T1"]= "amod_drip_01.png" ,["T2"]= "" } }  if CLIENT then  A_AM.ActMod.Actoji = { Valid = {}, Prefix = "Actoji." } local Actoji = A_AM.ActMod.Actoji   local function A_ToMinutesSeconds(seconds) 	local minutes = math.floor(seconds / 60) 	seconds = seconds - minutes * 60  	return string.format("%02d:%02d", minutes, math.floor(seconds)) end local function A_ToMinutesSecondsCD(seconds) 	seconds = math.ceil(seconds) 	local minutes = math.floor(seconds / 60) 	local hs = math.floor(minutes / 60) 	seconds = seconds - minutes * 60 	minutes = minutes - hs * 60  	return string.format("%02d:%02d:%02d", hs, minutes, seconds) end local function A_ToMinutesSecondsMilliseconds(seconds) 	local minutes = math.floor(seconds / 60) 	seconds = seconds - minutes * 60  	local milliseconds = math.floor(seconds % 1 * 100)  	return string.format("%02d:%02d.%02d", minutes, math.floor(seconds), milliseconds) end  local function get_aage(tbl)     local count = #tbl     local sum = 0     for i = 1, count do         sum = sum + tbl[i]     end     return sum / count end   function A_AM.ActMod:AddCrMdl( pl,str,Tmd1,Tmd2,Tmd3,Tmd4 ) 	pl.actmodstr = str 	if table.Count(Tmd1) !=0 then local h_hair = ClientsideModel(Tmd1["mdl"], RENDERGROUP_BOTH) 	h_hair:SetNoDraw(true) pl.AAct_mdl1 = h_hair pl.AAct_Tmdl1 = Tmd1 end 	if table.Count(Tmd2) !=0 then local h_hair2 = ClientsideModel(Tmd2["mdl"], RENDERGROUP_BOTH) 	h_hair2:SetNoDraw(true) pl.AAct_mdl2 = h_hair2 pl.AAct_Tmdl2 = Tmd2 end 	if table.Count(Tmd3) !=0 then local h_hair3 = ClientsideModel(Tmd3["mdl"], RENDERGROUP_BOTH) 	h_hair3:SetNoDraw(true) pl.AAct_mdl3 = h_hair3 pl.AAct_Tmdl3 = Tmd3 end 	if table.Count(Tmd4) !=0 then local h_hair4 = ClientsideModel(Tmd4["mdl"], RENDERGROUP_BOTH) 	h_hair4:SetNoDraw(true) pl.AAct_mdl4 = h_hair4 pl.AAct_Tmdl4 = Tmd4 end end  function A_AM.ActMod:RemoveCrMdl( pl,t ) 	if pl.actmodstr then pl.actmodstr = nil end 	if (t == "mdl1" or t == "*") and pl.AAct_mdl1 and IsValid(pl.AAct_mdl1) then 		pl.AAct_mdl1:Remove() 		pl.AAct_mdl1 = nil 	end pl.AAct_Tmdl1 = nil 	if (t == "mdl2" or t == "*") and pl.AAct_mdl2 and IsValid(pl.AAct_mdl2) then 		pl.AAct_mdl2:Remove() 		pl.AAct_mdl2 = nil 	end pl.AAct_Tmdl2 = nil 	if (t == "mdl3" or t == "*") and pl.AAct_mdl3 and IsValid(pl.AAct_mdl3) then 		pl.AAct_mdl3:Remove() 		pl.AAct_mdl3 = nil 	end pl.AAct_Tmdl3 = nil 	if (t == "mdl4" or t == "*") and pl.AAct_mdl4 and IsValid(pl.AAct_mdl4) then 		pl.AAct_mdl4:Remove() 		pl.AAct_mdl4 = nil 	end pl.AAct_Tmdl4 = nil end  net.Receive("A_AM.ActMod.AddMdl", function() 	local pl = net.ReadEntity() 	local str = net.ReadString() 	local Tmd1 = net.ReadTable() 	local Tmd2 = net.ReadTable() 	local Tmd3 = net.ReadTable() 	local Tmd4 = net.ReadTable() 	A_AM.ActMod:AddCrMdl(pl,str,Tmd1,Tmd2,Tmd3,Tmd4) end)  net.Receive("A_AM.ActMod.AddRemove", function() 	local pl = net.ReadEntity() 	local t = net.ReadString() 	if IsValid(pl) then 		A_AM.ActMod:RemoveCrMdl( pl,t ) 	end end)   hook.Add("PostPlayerDraw", "AAct_mdl", function(pl) 	if not pl:Alive() or (pl.AAct_mdl1 == nil and pl.AAct_mdl2 == nil and pl.AAct_mdl3 == nil and pl.AAct_mdl4 == nil) then return end  	local model1 	local model2 	local model3 	local model4 	 	if pl.AAct_mdl1 then model1 = pl.AAct_mdl1 end 	if pl.AAct_mdl2 then model2 = pl.AAct_mdl2 end 	if pl.AAct_mdl3 then model3 = pl.AAct_mdl3 end 	if pl.AAct_mdl4 then model4 = pl.AAct_mdl4 end  local function CrMdl( model,params ) if not model or not IsValid(model) then return end 	local size, pos, ang = 1, Vector(), Angle()  	if params["TypAtta"] == 1 then 		local attach_id = pl:LookupAttachment(params["attm"]) 		if not attach_id then return end 		local attach = pl:GetAttachment(attach_id) 		if not attach then return end 		pos, ang = attach.Pos, attach.Ang 			pos = pos + (ang:Forward()*params["pos_fo"] +ang:Right()*params["pos_ri"] +ang:Up()*params["pos_up"]) 			ang = ang + params["ang"] 		model:SetPos(pos) 		model:SetAngles(ang) 		model:SetRenderOrigin(pos) 		model:SetRenderAngles(ang) 	elseif params["TypAtta"] == 2 then 		local bone1 = pl:LookupBone(params["attm"]) 		if not bone1 then return end 				local pos, ang = pl:GetBonePosition(bone1) 				pos, ang = LocalToWorld( 					params["pos"] or Vector(), 					params["ang"] or Angle(), 					pos or pl:GetPos(), 					ang or pl:GetAngles() 				) 		model:SetPos( pos + (ang:Forward() *params["pos_fo"]  +ang:Right() *params["pos_ri"] + ang:Up() *params["pos_up"]) ) 		model:SetAngles(ang) 	elseif params["TypAtta"] == 3 then 		local bone1 = pl:LookupBone(params["attm"]) 		if not bone1 then return end 		local position, angles = pl:GetBonePosition(bone1) 		angles:RotateAroundAxis(angles:Forward(), params["ang_p"]) 		angles:RotateAroundAxis(angles:Right(), params["ang_y"]) 		angles:RotateAroundAxis(angles:Up(), params["ang_r"]) 		model:SetPos( position + (angles:Forward() *params["pos_fo"]  +angles:Right() *params["pos_ri"] + angles:Up() *params["pos_up"]) ) 		model:SetAngles(angles) 	elseif params["TypAtta"] == 0 then 		local position, angles = pl:GetBonePosition(0) 		angles:RotateAroundAxis(angles:Forward(), params["ang_p"]) 		angles:RotateAroundAxis(angles:Right(), params["ang_y"]) 		angles:RotateAroundAxis(angles:Up(), params["ang_r"]) 		model:SetPos( position + (angles:Forward() *params["pos_fo"]  +angles:Right() *params["pos_ri"] + angles:Up() *params["pos_up"]) ) 		model:SetAngles(angles) 		 	end 		size = params["size"] 		model:SetModelScale(size*pl:GetModelScale()) 				 		model:SetupBones() 		model:DrawModel() 		model:SetRenderOrigin() 		model:SetRenderAngles() return model end   	if pl.actmodstr == "glowstickdance" then render.SetColorModulation(255-(255*math.sin(CurTime()*4)), 255-(255*math.sin(CurTime()*3)), 255-(255*math.sin(CurTime()*6))) end 	if model1 then CrMdl( model1,pl.AAct_Tmdl1 ) end 	if model2 then CrMdl( model2,pl.AAct_Tmdl2 ) end 	if model3 then CrMdl( model3,pl.AAct_Tmdl3 ) end 	if model4 then CrMdl( model4,pl.AAct_Tmdl4 ) end 	 	 end)  net.Receive( "A_AM.ActMod.SvToCl", function() local ply = net.ReadEntity() local txt = net.ReadString() 	if IsValid( ply ) then 	end end)  net.Receive( "A_AM.SC_T_PlyP_ToCl", function() local ply = net.ReadEntity() local ply2 = net.ReadEntity() local txt = net.ReadString() local RTable = net.ReadTable() local STxt 	if IsValid( ply ) and IsValid( ply2 ) then 	 local pl = LocalPlayer() local function DGet(pply,GNWBool) local aawa = 0 if pply:GetNWBool( GNWBool, false ) == true then if GNWBool == "A_ActMod.GetMDLTr_SV_Base__cl" then if pply:GetNWBool( "A_ActMod.GetSeqTr_SV_Base__cl", false ) == true then aawa = 5 else aawa = 4 end elseif GNWBool == "A_ActMod.GetMDLTr_SV_ECTE__cl" then if pply:GetNWBool( "A_ActMod.GetSeqTr_SV_ECTE__cl", false ) == true then aawa = 3 else aawa = 2 end elseif GNWBool == "A_ActMod.GetMDLTr_SV_BAM4__cl" then if pply:GetNWBool( "A_ActMod.GetSeqTr_SV_BAM4__cl", false ) == true then aawa = 3 else aawa = 2 end elseif GNWBool == "A_ActMod.GetMDLTr_SV_EAM4__cl" then if pply:GetNWBool( "A_ActMod.GetSeqTr_SV_EAM4__cl", false ) == true then aawa = 3 else aawa = 2 end  elseif GNWBool == "A_ActMod.GetMDLTr_SXdr__cl" then if pply:GetNWBool( "A_ActMod.GetMDLTr_Setxdr__cl", false ) == true then aawa = 5 else aawa = 4 end elseif GNWBool == "A_ActMod.GetMDLTr_CTE__cl" then if pply:GetNWBool( "A_ActMod.GetSeqTr_ECTE__cl", false ) == true then aawa = 3 else aawa = 2 end elseif GNWBool == "A_ActMod.GetMDLTr_BAM4__cl" then if pply:GetNWBool( "A_ActMod.GetSeqTr_BaseAM4__cl", false ) == true then aawa = 3 else aawa = 2 end elseif GNWBool == "A_ActMod.GetMDLTr_Pack__cl" then if pply:GetNWBool( "A_ActMod.GetSeqTr_EAM4__cl", false ) == true then aawa = 3 else aawa = 2 end elseif GNWBool == "A_ActMod.GetSodTr_CTM__cl" then if pply:GetNWBool( "A_ActMod.GetSodTr_CTM__cl", false ) == true then aawa = 3 else aawa = 1 end elseif GNWBool == "A_ActMod.GetSodTr_Pack__cl" then if pply:GetNWBool( "A_ActMod.GetSodTr_Pack__cl", false ) == true then aawa = 3 else aawa = 1 end else aawa = 3 end else if GNWBool == "A_ActMod.GetMDLTr_SV_Base__cl" and pply:GetNWBool( "A_ActMod.GetSeqTr_SV_ECTE__cl", false ) == true or GNWBool == "A_ActMod.GetMDLTr_SXdr__cl" and pply:GetNWBool( "A_ActMod.GetSeqTr_ECTE__cl", false ) == true then aawa = 3 else aawa = 1 end end return aawa end  		if txt == "GetTableFromPly_ToPly2" then 		 		local asfa 		local asfa2 		local ActojiData = LocalPlayer():GetPData( "ActojiDial", false ) 		local ActojiData2 = LocalPlayer():GetPData( "ActojiDial2", false ) 		 		if ActojiData and ActojiData != "false" then asfa = util.JSONToTable( ActojiData ) end 		if ActojiData2 and ActojiData2 != "false" then asfa2 = util.JSONToTable( ActojiData2 ) end 	 						RTable = { 							["GetRequirements"] = { 							["IMeun_Num"]= pl:GetNWInt( "A_ActMod.IMeun_Num",0) 							,["IMeun_Tiyp"]= pl:GetNWInt( "A_ActMod.Select_Base",0) 							,["Base_wOS_xdR"]= DGet(pl,"A_ActMod.GetMDLTr_SXdr__cl") 							,["Base_AM4"]= DGet(pl,"A_ActMod.GetMDLTr_BAM4__cl") 							,["Anim_CTE"]= DGet(pl,"A_ActMod.GetMDLTr_CTE__cl") 							,["Anim_AM4"]= DGet(pl,"A_ActMod.GetMDLTr_Pack__cl") 							,["Sound_CTM"]= DGet(pl,"A_ActMod.GetSodTr_CTM__cl") 							,["Sound_AM4"]= DGet(pl,"A_ActMod.GetSodTr_Pack__cl") 							}, 							["GetConCl"] = { 							["GetConN_actmod_cl_showmasngerr"]= GetConVarNumber("actmod_cl_showmasngerr") 							,["GetConN_actmod_cl_menuformat"]= GetConVarNumber("actmod_cl_menuformat") 							,["GetConN_actmod_cl_menuformat2"]= GetConVarNumber("actmod_cl_menuformat2") 							,["GetConN_actmod_cl_loop"]= GetConVarNumber("actmod_cl_loop") 							,["GetConN_actmod_cl_effects"]= GetConVarNumber("actmod_cl_effects") 							,["GetConN_actmod_cl_sound"]= GetConVarNumber("actmod_cl_sound") 							,["GetConN_actmod_cl_thememenu"]= GetConVarNumber("actmod_cl_thememenu") 							,["GetConN_actmod_cl_stext"]= GetConVarString("actmod_cl_stext") 							,["GetConN_actmod_cl_showmodl"]= GetConVarNumber("actmod_cl_showmodl") 							,["GetConN_actmod_cl_sortemote"]= GetConVarNumber("actmod_cl_sortemote") 							,["GetConN_actmod_cl_setcamera"]= GetConVarNumber("actmod_cl_setcamera") 							,["GetConN_actmod_cl_showbhelp"]= GetConVarNumber("actmod_cl_showbhelp") 							}, 							["GetIcoUseCl"] = { 							["GetIco_1"]= (asfa and asfa[1]) or "" 							,["GetIco_2"]= (asfa and asfa[2]) or "" 							,["GetIco_3"]= (asfa and asfa[3]) or "" 							,["GetIco_4"]= (asfa and asfa[4]) or "" 							,["GetIco_5"]= (asfa and asfa[5]) or "" 							,["GetIco_6"]= (asfa and asfa[6]) or "" 							,["GetIco_7"]= (asfa and asfa[7]) or "" 							,["GetIco_8"]= (asfa and asfa[8]) or "" 							,["GetIco2_1"]= (asfa2 and asfa2[1]) or "" 							,["GetIco2_2"]= (asfa2 and asfa2[2]) or "" 							,["GetIco2_3"]= (asfa2 and asfa2[3]) or "" 							,["GetIco2_4"]= (asfa2 and asfa2[4]) or "" 							,["GetIco2_5"]= (asfa2 and asfa2[5]) or "" 							,["GetIco2_6"]= (asfa2 and asfa2[6]) or "" 							,["GetIco2_7"]= (asfa2 and asfa2[7]) or "" 							,["GetIco2_8"]= (asfa2 and asfa2[8]) or "" 							} 						}  		asfa = nil asfa2 = nil ActojiData = nil ActojiData2 = nil 		STxt = "GetTableFromPly_ToPly1" 		elseif txt == "GetTableFromPly_ToPly1_Finsh" then ply2.GetR_Table_Ply = RTable   		elseif txt == "GetTabiPly_1To2" then    	local pgaw = pl:GetActiveWeapon() 	pl.ToPnext_update = CurTime() + 0.7 			RTable = { 					["P_iFPS"] = pl.ATT_Pi_fps or "00" 					,["P_Ping"] = pl.ATT_Pi_ping or "00" 					,["P_Health"] = pl:Health() 					,["P_HealthMax"] = pl:GetMaxHealth() 					,["P_ddd"] = A_ToMinutesSecondsCD(CurTime()) 					,["P_Pos"] = tostring(pl:GetPos()) 					,["P_Ang"] = tostring(pl:EyeAngles()) 					,["P_Length"] = math.Round(pl:GetVelocity():Length()) 					,["P_Weap"] = pgaw and IsValid(pgaw) and pgaw:GetClass() or "nil" 					} 			STxt = "GetTabiPly_2To1" 		elseif txt == "GetTabiPly_Finsh" then ply2.GetR_i = RTable 		 		elseif txt == "GetTabiPly_Avs_Get_Start" then 			if ply2.GetTable_Avs then 				local ts1,ts2 = "nil_","nil_" 				for k, v in pairs(ply2.GetTable_Avs) do 					if v["ing"] then ts2 = v["ing"] end 					if v["ok"] then ts1 = v["ok"] end 					 					RTable[k] = { ["ok"]= ts1 ,["ing"]= ts2 } 					ts1 = nil ts2 = nil 				end 			end 			STxt = "GetTabiPly_Avs_Get_2To1" 		elseif txt == "GetTabiPly_Avs_Get_Finsh" then ply2.AvsGetR_i = RTable 		 		elseif txt == "GetTabiPly_Avs_Set_Start" then A_AM.ActMod:AG_DatA( RTable[1],RTable[2],RTable[3],RTable[4] ) 		 		 		end 		 		if STxt then 		net.Start( "A_AM.SC_T_PlyP_ToSv" ) net.WriteEntity( ply ) net.WriteEntity( ply2 ) net.WriteString( STxt ) net.WriteTable( RTable ) net.SendToServer() 		end 	end end)  net.Receive( "A_AM.ActMod.act_Tocl", function() 	local ply = LocalPlayer() 	local tab = net.ReadString() 	local Cyc = net.ReadFloat() 	if IsValid( ply ) then 		ply.A_ActMod_GetDir = tab 		if GetConVar("actmod_sy_tovs_mmdfast"):GetInt() == 0 then A_AM.ActMod:A_StCamer(ply) end 	end end)  concommand.Add("+actmod_menu", function(ply, cmd, args) if ply.CKeyAct_UseMenu != true then ply.CKeyAct_UseMenu = true end end) concommand.Add("-actmod_menu", function(ply, cmd, args) if ply.CKeyAct_UseMenu then ply.CKeyAct_UseMenu = nil end end)  if !ConVarExists("actmod_cl_allowkey") then CreateClientConVar("actmod_cl_allowkey", 0, true, false) end if !ConVarExists("actmod_key_iconmenu") then CreateClientConVar("actmod_key_iconmenu", tostring(KEY_H), true, false) end if !ConVarExists("actmod_keyo_h") then CreateClientConVar("actmod_keyo_h", tostring(KEY_LALT), true, false) end if !ConVarExists("actmod_keyo_1") then CreateClientConVar("actmod_keyo_1", tostring(KEY_1), true, false) end if !ConVarExists("actmod_keyo_2") then CreateClientConVar("actmod_keyo_2", tostring(KEY_2), true, false) end if !ConVarExists("actmod_keyo_3") then CreateClientConVar("actmod_keyo_3", tostring(KEY_3), true, false) end if !ConVarExists("actmod_keyo_4") then CreateClientConVar("actmod_keyo_4", tostring(KEY_4), true, false) end if !ConVarExists("actmod_keyo_5") then CreateClientConVar("actmod_keyo_5", tostring(KEY_5), true, false) end local a_actmod_enabled = GetConVar("actmod_sv_enabled") local a_actmod_key_iconmenu = GetConVar("actmod_key_iconmenu") local a_actmodkey_wassed = false local a_actmod_wassed = false local a_actmod_hold = false local a_actmod_gno = false  local function A_StrtActC(pl,str) 	pl.ActMod_TimMenRe = CurTime() + 0.3 	if a_actmod_enabled:GetBool() then 		local Aca 		if isnumber(str) then 			local ActiData = pl:GetPData( "ActojiDial", false ) or false 			if ActiData and ActiData != "false" then 				Actoji.table = util.JSONToTable( ActiData ) 			end 			Aca = Actoji.table[str] 		else 			Aca = str 		end 		 		pl:SetNWString("A_ActMod_cl_actLoop",Aca) pl.AGSped_f = 0 pl.AGSped_b = 0 		if GetConVar("actmod_sy_tovs"):GetInt() == 1 then 			net.Start("A_AM.ActMod.Start") net.WriteString( Aca ) net.SendToServer() 		else 			local cl_s, cl_e, cl_l = "0", "0", "0" 			if GetConVarNumber("actmod_cl_sound") == 1 then 				pl:SetNWBool("A_ActMod_cl_Sound", true) 				cl_s = "1" 			else 				pl:SetNWBool("A_ActMod_cl_Sound", false) 			end 			if GetConVarNumber("actmod_cl_effects") == 1 then 				pl:SetNWBool("A_ActMod_cl_Effects", true) 				cl_e = "1" 			else 				pl:SetNWBool("A_ActMod_cl_Effects", false) 			end 			if GetConVarNumber("actmod_cl_loop") == 1 then 				pl:SetNWInt("A_ActMod_cl_Loop", 1) 				cl_l = "1" 			elseif GetConVarNumber("actmod_cl_loop") == 2 then 				pl:SetNWInt("A_ActMod_cl_Loop", 2) 				cl_l = "2" 			else 				pl:SetNWInt("A_ActMod_cl_Loop", 0) 			end 			RunConsoleCommand("actmod_wts","wts",Aca,cl_s, cl_e, cl_l) 		end 	else 		A_AM.ActMod:SP_iError(pl,"nallow") 	end end  local function PUpdateColcted(pl) if !pl or !IsValid(pl) or !pl.i_colcted then return end     table.insert(pl.i_colcted.fps, (1 / FrameTime()))     table.insert(pl.i_colcted.ping, LocalPlayer():Ping()) end local function PResetColcted(pl)     pl.i_colcted = { fps = {},ping = {} } end PResetColcted(LocalPlayer())  function A_AM.ActMod.Think(ply) 	if not IsValid(ply) then return end 	if (ply.ToPnext_update or 0) > CurTime() then 		PUpdateColcted(ply) 		if (ply.Pnext_update or 0) < CurTime() then ply.Pnext_update = CurTime() + 0.2 			ply.ATT_Pi_fps = math.Round(get_aage(ply.i_colcted.fps)) 			ply.ATT_Pi_ping = math.Round(get_aage(ply.i_colcted.ping)) 			PResetColcted(ply) 		end 	end  	if ply:A_ActMod_IsActing() and a_actmod_wassed == false then a_actmod_wassed = true 	elseif !ply:A_ActMod_IsActing() and a_actmod_wassed == true then a_actmod_wassed = false A_AM.ActMod:A_ActMod_OffActing( ply ) end 	if (ply:KeyDown(IN_FORWARD) or ply:KeyDown(IN_BACK) or ply:KeyDown(IN_MOVELEFT) or ply:KeyDown(IN_MOVERIGHT)) then ply.ActMod_TimMenRe = CurTime() + 0.5 end  	if (ply == LocalPlayer() and ply:Alive()) and ( (system.IsLinux() or system.HasFocus()) and not gui.IsGameUIVisible() and not gui.IsConsoleVisible() ) then 		if (input.IsKeyDown(a_actmod_key_iconmenu:GetInt()) or ply.CKeyAct_UseMenu == true) and (a_actmod_gno == true || not vgui.GetKeyboardFocus()) then a_actmod_gno = true 		if a_actmodkey_wassed == false and !IsValid(Actoji.Frame) and !(ply.ActMod_UseMenu or ply.GameCaC_UseMenu or ply.PutMark_UseMenu) then 		if a_actmod_enabled:GetBool() then Actoji:Open() else A_AM.ActMod:SP_iError(ply,"nallow") end end a_actmodkey_wassed = true 		else a_actmod_gno = false 		if a_actmodkey_wassed == true and IsValid(Actoji.Frame) and !Actoji.OnDfind then Actoji:Close() end a_actmodkey_wassed = false 		end 		else a_actmod_gno = false if a_actmodkey_wassed == true and IsValid(Actoji.Frame) and !Actoji.OnDfind then Actoji:Close() end a_actmodkey_wassed = false 	end 	if (ply:GetNWInt( "A_ActMod_RedyUse_Num", 0 ) != 100 or ply:GetNWBool( "A_ActMod_RedyUse", false ) != true) and ply.Aa_TimeFiledLod and ply.Aa_TimeFiledLod < CurTime() then 		print( "\n*********** Time FiledLod ***********" ) 		print( "-- A_ActMod_RedyUse_Num :",ply:GetNWInt( "A_ActMod_RedyUse_Num", 0 ) ) 		print( "-- A_ActMod_RedyUse :",ply:GetNWBool( "A_ActMod_RedyUse", 0 ) ) 		print( "*********** Time FiledLod ***********\n" ) 		ply.Aa_TimeFiledLod = CurTime() + 30 		A_AM.ActMod.ClRestuo(ply) 	end 	if !ply.AA_GThinktOne then 		ply.AA_GThinktOne = true 		A_AM.ActMod.Sutep_Done2 = true 		A_AM.ActMod.Sutep_Done3 = true 		if GetConVar("actmod_sy_tovs"):GetInt() == 3 then 			net.Start( "A_AM.ActMod.CToS_ST" ) 			 net.WriteEntity( NULL ) 			 net.WriteString( "CToS_" ) 			 net.WriteTable( {"wts_SCTS","AddThink_Ply"} ) 			net.SendToServer() 		else 			RunConsoleCommand("actmod_wts","wts_SCTS","AddThink_Ply") 		end 	end end   local function ASTC(ply,Atxt) 	if GetConVar("actmod_sy_tovs"):GetInt() == 1 then 		net.Start( "A_AM.ActMod.ClToSv" ) net.WriteString( Atxt ) net.SendToServer() 	else 		RunConsoleCommand("actmod_wts","wts_SCTS",Atxt) 	end end local function AScw(ply,cmd,ymove,yattk) 	if ymove then 	if (ply.Aa_TGo_F or 0) < CurTime() and cmd:KeyDown( IN_FORWARD ) then ply.Aa_TGo_F = CurTime() + 0.2 	ASTC(ply,"E_ IN_FORWARD") 	elseif ymove == 2 and (ply.Aa_TGo_B or 0) < CurTime() and cmd:KeyDown( IN_BACK ) then ply.Aa_TGo_B = CurTime() + 0.2 	ASTC(ply,"E_ IN_BACK") 	elseif ((ply.Aa_TGo_F or 0) > CurTime() and !cmd:KeyDown( IN_FORWARD )) or ((ply.Aa_TGo_B or 0) > CurTime() and !cmd:KeyDown( IN_BACK )) then 	ASTC(ply,"E_ StopFORWARD") ply.Aa_TGo_F = CurTime() ply.Aa_TGo_B = CurTime() 	end end 	if yattk then 	if !ply.Aa_TGo_att1 and cmd:KeyDown( IN_ATTACK ) then ply.Aa_TGo_att1 = true 	if cmd:KeyDown( IN_SPEED ) then ASTC(ply,"E_ IN_ATTACKand") else ASTC(ply,"E_ IN_ATTACK") end 	elseif ply.Aa_TGo_att1 and !cmd:KeyDown( IN_ATTACK ) then ply.Aa_TGo_att1 = nil 	end end end  function A_AM.ActMod:CreateTauntCamera( endless ,ply )  	local CAM = {}  	local OkViw = GetConVarNumber("actmod_cl_setcamera") == 3 and true or false 	local Viw180 = GetConVarNumber("actmod_cl_cam180") == 1 and 180 or 0 	local CustomPos2,PlayerLockAngles 	local TiViw,TiResAng = CurTime(),CurTime() 	local GeyOn,WasOn = true,false 	local An180_x,An180_y,is180_x,is180_y = 180,0,0,0 	local InLerp,OutLerp,GCtLerp,GCtLerpZ,TarRLAng,SpRL = 0,1,0,0,0,3 	local GMovea,GMovea_Sped = 0,0  	local ZCustomAngles = ply:EyeAngles() 	local ZGetAngles = ply:GetAngles() 	local CustomAngles = ZCustomAngles 	local CustomAngles2 = ZCustomAngles 	if Viw180 > 0 then 		CustomAngles = CustomAngles + Angle(-ZCustomAngles.p,180,0) 		CustomAngles2 = CustomAngles2 + Angle(-ZCustomAngles.p,180,0) 	end 	 	ply:SetEyeAngles(Angle(0,ZCustomAngles.y,ZCustomAngles.r)) 	ply:SetNWInt("actmod_Zamsp", math.Clamp(ply:GetNWInt("actmod_Zamsp",0) , -ply:OBBMaxs().z/5, ply:OBBMaxs().z/2.5)) 	if ply:GetNWInt("actmod_Zamsp",0) ~= 0 then GCtLerpZ = ply:GetNWInt("actmod_Zamsp",0) end 	 	local function VEye(ply,view) 		if OkViw == true and ( ply:LookupAttachment( "eyes" ) ) then 			view.origin = ply:GetAttachment( ply:LookupAttachment( "eyes" ) ).Pos 			view.angles = ply:GetAttachment( ply:LookupAttachment( "eyes" ) ).Ang 		end 	end  	CAM.Remove = function( self ) self = nil  return end 	CAM.ShouldDrawLocalPlayer = function( self, ply, on ) return on end 	CAM.CalcView = function( self, view, ply, on ) 		if ( PlayerLockAngles == nil ) then 			PlayerLockAngles = ply:EyeAngles() 			CustomAngles = ply:EyeAngles() 		end 		if !ply:Alive() then on = false end 		if ( PlayerLockAngles == nil ) then return end 		  		local TargetOrigin = view.origin 		GCtLerp = Lerp( FrameTime() *3, GCtLerp, ply:GetNWInt("actmod_camzm",0) ) 		GCtLerpZ = Lerp( FrameTime() *3, GCtLerpZ, ply:GetNWInt("actmod_Zamsp",0) ) 		if GetConVarNumber("actmod_cl_setcamera") == 1 then 			TargetOrigin = (ply:GetBonePosition(0) + Vector(0,0,(15-GCtLerpZ)) - CustomAngles:Forward() * (100+GCtLerp)) 		elseif GetConVarNumber("actmod_cl_setcamera") == 2 then 			TargetOrigin = view.origin + Vector(0,0,-(7+GCtLerpZ)) - CustomAngles:Forward() * (120+GCtLerp) 		else 			if ply:A_ActMod_CamParent() then 				TargetOrigin = (ply:GetBonePosition(0) + Vector(0,0,(15-GCtLerpZ)) - CustomAngles:Forward() * (120+GCtLerp)) 			else 				TargetOrigin = view.origin + Vector(0,0,-(7+GCtLerpZ)) - CustomAngles:Forward() * (120+GCtLerp) 			end 		end 		 		local tr = util.TraceHull( { start = view.origin, endpos = TargetOrigin, mask = MASK_SHOT, filter = function(ent) if ent:IsWorld() or (ent:GetClass() == "prop_physics" or ent:GetClass() == "prop_dynamic" or ent:GetClass() == "prop_ragdoll") and ent:GetOwner() != ply then return true end end, mins = Vector( -8, -8, -8 ), maxs = Vector( 8, 8, 8 ) } ) 		TargetOrigin = tr.HitPos + tr.HitNormal 		view.drawviewer = self:ShouldDrawLocalPlayer( ply, on )  		if ( InLerp < 1 ) then  			InLerp = InLerp + FrameTime() * ply:A_ActMod_CamInLerp() 			if GetConVarNumber("actmod_cl_setcamera") == 1 then view.origin = LerpVector( 0.8, view.origin + Vector(0,0,-(15+GCtLerpZ)) - CustomAngles:Forward() * 80, TargetOrigin ) 			elseif GetConVarNumber("actmod_cl_setcamera") == 2 then view.origin = LerpVector( 0.8, view.origin + Vector(0,0,-(7+GCtLerpZ)) - CustomAngles:Forward() * 100, TargetOrigin ) 			else 				if ply:A_ActMod_CamParent() then 					view.origin = LerpVector( InLerp, view.origin + Vector(0,0,-(15+GCtLerpZ)) - CustomAngles:Forward() * 80, TargetOrigin ) 				else 					view.origin = LerpVector( InLerp, view.origin + Vector(0,0,-(7+GCtLerpZ)) - CustomAngles:Forward() * 100, TargetOrigin ) 				end 			end 			CustomPos2 = view.origin 			CustomAngles2 = CustomAngles 			view.angles = CustomAngles 			if ( ply:Alive() || IsValid( ply:GetViewEntity() ) || ply:GetViewEntity() != ply ) then 				VEye(ply,view) 				return view 			end  		end  		 		 		if GetConVarNumber("actmod_cl_smshcam_on") > 0 and not (OkViw == true and ply:LookupAttachment( "eyesa" ) ) then 			CustomPos2 = Lerp( FrameTime() * ply:GetNWInt("actmod_camsp",5), CustomPos2, TargetOrigin ) 			CustomAngles2 = Lerp( FrameTime() * (ply:GetNWInt("actmod_camsp",5)+1), CustomAngles2, CustomAngles * 1 ) 			view.origin = CustomPos2 			view.angles = CustomAngles2 		else 			CustomPos2 = TargetOrigin 			CustomAngles2 = CustomAngles * 1 			view.origin = TargetOrigin 			view.angles = CustomAngles * 1 		end 		VEye(ply,view) 		return view 	end  		CAM.CreateMove = function( self, cmd, ply, on ) 		local tttru = CurTime() + 0.2 		if GeyOn == true then 			if ( ply:Health() < 0 or !ply:Alive() ) or !ply:A_ActMod_IsActing() then 				on = false 				if endless then 					GeyOn = false 					ply.ActMod_AddTRu = CurTime() + 0.2 					if GetConVar("actmod_sy_tovs"):GetInt() == 1 then 					net.Start( "A_AM.ActMod.CancelCamera" ) net.WriteTable( {} ) net.SendToServer() 					else RunConsoleCommand("actmod_wts","wts_End") end 					ply.ActMod_RLAng = 0 				end 			end 			if ( !on ) then return end  			if endless then 				if !ply.Aonpes and cmd:KeyDown( IN_DUCK ) then ply.Aonpes = true 				if OkViw == true then OkViw = false else OkViw = true end 				elseif ply.Aonpes and !cmd:KeyDown( IN_DUCK ) then ply.Aonpes = nil end 				 				if ply.ActMod_AddTRuh == true then 					GeyOn = false 					ply.ActMod_AddTRuh = nil 					if OkViw == true then 						ply.ActMod_GeetAng = ply:EyeAngles() 					else 						if Viw180 > 0 and is180_y == 0 and is180_x == 0 then 							CustomAngles = CustomAngles + Angle(0,180,0) 						end 						ply.ActMod_GeetAng = CustomAngles 					end 					if GetConVar("actmod_sy_tovs"):GetInt() == 1 then 						net.Start( "A_AM.ActMod.CancelCamera" ) net.WriteTable( {ply.ActMod_GeetAng[1],ply.ActMod_GeetAng[2]} ) net.SendToServer() 					else 						RunConsoleCommand("actmod_wts","wts_End",tostring(ply.ActMod_GeetAng[1]),tostring(ply.ActMod_GeetAng[2])) 					end 					ply.ActMod_RLAng = 0 				end 			end  			 			if ( PlayerLockAngles == nil ) then 				PlayerLockAngles = cmd:GetViewAngles() 			end 		 			if ply:A_ActMod_GetMoveDir() != 0 then 			 				if ply:A_ActMod_GetMoveDir() >= 5 then 					if ply:A_ActMod_GetMoveDir() == 5 then AScw(ply,cmd,1) 					elseif ply:A_ActMod_GetMoveDir() == 6 then AScw(ply,cmd,1,true) 					elseif ply:A_ActMod_GetMoveDir() == 7 then AScw(ply,cmd,nil,true) 					elseif ply:A_ActMod_GetMoveDir() == 9 then AScw(ply,cmd,nil,true) 					elseif ply:A_ActMod_GetMoveDir() == 8 then AScw(ply,cmd,2,true) 						if cmd:KeyDown( IN_FORWARD ) then 							GMovea = 1 						elseif cmd:KeyDown( IN_BACK ) then 							GMovea = 2 						else 							GMovea = 0 						end 					end 				elseif (ply.Aa_TGo_F or 0) > CurTime() then 					net.Start( "A_AM.ActMod.ClToSv" ) net.WriteString( "E_ StopFORWARD" ) net.SendToServer() 					ply.Aa_TGo_F = CurTime() 				elseif ply.Aa_TGo_att1 then 					ply.Aa_TGo_att1 = nil 				end 			 				if ply:A_ActMod_GetMoveDir() != 7 then 					if cmd:KeyDown( IN_MOVERIGHT ) then tttru = CurTime() + 0.3 						if TarRLAng > 0 and cmd:KeyDown( IN_SPEED ) then 							TarRLAng = 0 						elseif cmd:KeyDown( IN_SPEED ) then 							TarRLAng = math.max(-1.4,TarRLAng - 10*FrameTime()) 						elseif cmd:KeyDown( IN_WALK ) then 							TarRLAng = math.max(-0.2,TarRLAng - 2*FrameTime()) 						else 							TarRLAng = math.max(-0.6,TarRLAng - 3*FrameTime()) 						end 					elseif cmd:KeyDown( IN_MOVELEFT ) then tttru = CurTime() + 0.3 						if TarRLAng < 0 and cmd:KeyDown( IN_SPEED ) then 							TarRLAng = 0 						elseif cmd:KeyDown( IN_SPEED ) then 							TarRLAng = math.min(1.4,TarRLAng + 10*FrameTime()) 						elseif cmd:KeyDown( IN_WALK ) then 							TarRLAng = math.min(0.2,TarRLAng + 2*FrameTime()) 						else 							TarRLAng = math.min(0.6,TarRLAng + 3*FrameTime()) 						end 					else 						if TarRLAng > 0 then 							TarRLAng = math.max(0,TarRLAng - 20*FrameTime()) 						elseif TarRLAng < 0 then 							TarRLAng = math.min(0,TarRLAng + 20*FrameTime()) 						end 					end 					ply.ActMod_RLAng = ply.ActMod_RLAng +TarRLAng 					ply.ActMod_TastAng = TarRLAng 				end 			end 			 			if OkViw == false then 				CustomAngles.pitch = math.Clamp((CustomAngles.pitch + cmd:GetMouseY() * 0.05),-70,80) 				CustomAngles.yaw = CustomAngles.yaw - cmd:GetMouseX() * 0.05 				if Viw180 > 0 then 					An180_y = math.Clamp((An180_y + cmd:GetMouseY() * 0.05),-70,80) 					An180_x = (An180_x - cmd:GetMouseX() * 0.05) % 360 					if An180_y > 40 or An180_y < -40 then is180_y = 1 else is180_y = 0 end 					if An180_x > 200 or An180_x < 160 then is180_x = 1 else is180_x = 0 end 				end 			end 		 		end 		if GeyOn == true then 			cmd:SetViewAngles( PlayerLockAngles+Angle(0, ply.ActMod_RLAng, 0) ) 			ply.ActMod_GeetAng = ZCustomAngles 			ply.ActMod_DetAng = ZGetAngles 			if (tttru or 0) > CurTime() and (TiResAng or 0) < CurTime() then 				TiResAng = CurTime() +0.2 				net.Start( "A_AM.ActMod.AngEyeP" ) net.WriteAngle(CustomAngles) net.WriteAngle(ply.ActMod_DetAng) net.WriteBool(OkViw) net.SendToServer() 			end 		end  		if ply:A_ActMod_OnButtons() == false then 			cmd:ClearButtons() 			cmd:ClearMovement() 			if ply:A_ActMod_GetMoveDir() == 8 then 				if GMovea == 1 then 					GMovea_Sped = math.min(ply:GetNWInt( "A_AM.MoveSpeed" ),GMovea_Sped + ply:GetNWInt( "A_AM.MoveSpeed" )*4*FrameTime()) 				elseif GMovea == 2 then 					if ply:GetNWString("A_ActMod.Dir", "") == "zombie_run_fast" then 						GMovea_Sped = math.max(-math.min(40,ply:GetNWInt( "A_AM.MoveSpeed" )),GMovea_Sped - ply:GetNWInt( "A_AM.MoveSpeed" )*3.5*FrameTime()) 					else 						GMovea_Sped = math.max(-ply:GetNWInt( "A_AM.MoveSpeed" ),GMovea_Sped - ply:GetNWInt( "A_AM.MoveSpeed" )*3.5*FrameTime()) 					end 				else 					if GMovea_Sped > 0 then 						GMovea_Sped = math.max(0,GMovea_Sped - ply:GetNWInt( "A_AM.MoveSpeed" )*3.5*FrameTime()) 					elseif GMovea_Sped < 0 then 						GMovea_Sped = math.min(0,GMovea_Sped + ply:GetNWInt( "A_AM.MoveSpeed" )*3*FrameTime()) 					end 				end 				cmd:SetForwardMove(GMovea_Sped) 			elseif GMovea_Sped != 0 then GMovea_Sped = 0 			end 		end 		return true 	end  	return CAM end  local function A_ResetBonePositions(pl,ts,ta,tp) 	if (!pl:GetBoneCount()) then return end 	for i=0, pl:GetBoneCount() do 		if ts == true then pl:ManipulateBoneScale( i, Vector(1, 1, 1) ) end 		if ta == true then pl:ManipulateBoneAngles( i, Angle(0, 0, 0) ) end 		if tp == true then pl:ManipulateBonePosition( i, Vector(0, 0, 0) ) end 	end end  function A_AM.ActMod:A_StCamer(ply) 	if IsValid(ply) then 		A_ResetBonePositions(ply,true,true,true) 		if AnimationSWEP and ply:GetNWBool("animationStatus") then ply:SetNWBool("animationStatus", false) ply:SetNWInt("deactivateOnMove", 0) end 		A_AM.ActMod.TauntCamera = A_AM.ActMod.TauntCamera or A_AM.ActMod:CreateTauntCamera( true ,ply ) 	end end  net.Receive( "A_AM.ActMod.StartCamera", function() A_AM.ActMod:A_StCamer(LocalPlayer()) end )  hook.Add("RenderScreenspaceEffects","A_AM.EnTh3DCam",function() 	local ply = LocalPlayer() 	if not IsValid(ply) then return end 	if ply:A_ActMod_GetIsAct() == true then 		cam.Start3D(EyePos(),EyeAngles()) 		cam.End3D() 	end end) 	 hook.Add( "CreateMove", "A_AM.ActMod.TauntCameraMove", function( cmd ) 	local ply = LocalPlayer() 	if not IsValid(ply) then return end 	if not ply:A_ActMod_IsActing() then return end 	if not A_AM.ActMod.TauntCamera then return end 	return A_AM.ActMod.TauntCamera:CreateMove( cmd, LocalPlayer(), true ) end )   hook.Add( "CalcView", "A_AM.ActMod.TauntCameraView", function( ply, origin, angles ) 	if !ply:A_ActMod_IsActing() then return end 	if not A_AM.ActMod.TauntCamera then return end 	if ( ply:Alive() and IsValid( ply:GetViewEntity() ) and ply:GetViewEntity() == ply ) then 		return A_AM.ActMod.TauntCamera:CalcView( { origin = origin, angles = angles, fov = fov }, LocalPlayer(), true ) 	end end )   local function AKstt(ply) 	if (ply == LocalPlayer() and ply:Alive()) and ( not gui.IsGameUIVisible() and not gui.IsConsoleVisible() ) then 		if GetConVarNumber("actmod_cl_allowkey") == 1 and input.IsKeyDown(GetConVar("actmod_keyo_h"):GetInt()) then 			if ( ply.ActMod_TimMenRe or 0) < CurTime() and ply:GetNWInt( "A_ActMod.IMeun_Num",0) != 0 then 				if input.WasKeyPressed(GetConVar("actmod_keyo_1"):GetInt()) then A_StrtActC(ply,17) return true 				elseif input.WasKeyPressed(GetConVar("actmod_keyo_2"):GetInt()) then A_StrtActC(ply,18) return true 				elseif input.WasKeyPressed(GetConVar("actmod_keyo_3"):GetInt()) then A_StrtActC(ply,19) return true 				elseif input.WasKeyPressed(GetConVar("actmod_keyo_4"):GetInt()) then A_StrtActC(ply,20) return true 				elseif input.WasKeyPressed(GetConVar("actmod_keyo_5"):GetInt()) then A_StrtActC(ply,21) return true 				end 			end 		end 	end end  hook.Add("PlayerBindPress","A_AM.ActMod.FPress",function(ply,bind,pressed) 	if (ply.ActMod_AddTRu or 0) > CurTime() then 		if (bind == "-jump" or bind == "+jump" or bind == "-attack2" or bind == "+attack2") then return true end 	end 	if ply:A_ActMod_IsActing() then 		if (bind == "invprev" or bind == "invnext") then 			if input.IsKeyDown(KEY_E) then 				if bind == "invprev" then 					if (ply.ActMod_cam_tisp or 0) < CurTime() then 						ply.ActMod_cam_tisp = CurTime() + 0.02 						ply:SetNWInt("actmod_Zamsp", math.Clamp(ply:GetNWInt("actmod_Zamsp",0) - (input.IsKeyDown(KEY_LSHIFT) and 10 or 5), -ply:OBBMaxs().z/5, ply:OBBMaxs().z/2.5)) 					end 				else 					if (ply.ActMod_cam_tisp or 0) < CurTime() then 						ply.ActMod_cam_tisp = CurTime() + 0.02 						ply:SetNWInt("actmod_Zamsp", math.Clamp(ply:GetNWInt("actmod_Zamsp",0) + (input.IsKeyDown(KEY_LSHIFT) and 10 or 5), -ply:OBBMaxs().z/5, ply:OBBMaxs().z/2.5)) 					end 				end 			elseif input.IsKeyDown(KEY_LALT) then 				if bind == "invprev" then 					if (ply.ActMod_cam_tisp or 0) < CurTime() then 						ply.ActMod_cam_tisp = CurTime() + 0.02 						ply:SetNWInt("actmod_camsp", math.Clamp(ply:GetNWInt("actmod_camsp",5) + 1, 1, 10)) 					end 				else 					if (ply.ActMod_cam_tisp or 0) < CurTime() then 						ply.ActMod_cam_tisp = CurTime() + 0.02 						ply:SetNWInt("actmod_camsp", math.Clamp(ply:GetNWInt("actmod_camsp",5) - 1, 1, 10)) 					end 				end 			else 				if bind == "invprev" then 					if (ply.ActMod_cam_tisp or 0) < CurTime() then 						ply.ActMod_cam_tisp = CurTime() + 0.01 						ply:SetNWInt("actmod_camzm", math.Clamp(ply:GetNWInt("actmod_camzm",0) - (input.IsKeyDown(KEY_LSHIFT) and 20 or 5), -100, 700)) 					end 				else 					if (ply.ActMod_cam_tisp or 0) < CurTime() then 						ply.ActMod_cam_tisp = CurTime() + 0.01 						ply:SetNWInt("actmod_camzm", math.Clamp(ply:GetNWInt("actmod_camzm",0) + (input.IsKeyDown(KEY_LSHIFT) and 20 or 5), -100, 700)) 					end 				end 			end 		elseif input.IsKeyDown(KEY_LALT) and input.WasMousePressed(MOUSE_RIGHT) then 				if GetConVarNumber("actmod_cl_smshcam_on") != 1 then 					ply:ConCommand("actmod_cl_smshcam_on 1 \n") 				else 					ply:ConCommand("actmod_cl_smshcam_on 0 \n") 				end 		 		elseif pressed == true then 			AKstt(ply) 		end 		if (ply.ActMod_AddTRu or 0) < CurTime() and not ( input.IsKeyDown(KEY_LALT) ) and (bind == "-jump" or bind == "+jump" or bind == "-attack2" or bind == "+attack2") then 			ply.ActMod_AddTRuh = true 			ply.ActMod_AddTRu = CurTime() + 0.2 			return true 		end 		if (bind == "invnext" or bind == "invprev" or bind:sub(1,4) == "slot") then return true end 		return 	else 		if ply:GetActiveWeapon() and ply:GetActiveWeapon():IsValid() and ply:GetActiveWeapon():GetClass() == "aact_weapact" then return true end 		return AKstt(ply) 	end end)   net.Receive( "A_AM.ActMod.SetTCl_NWBool", function() local ply = net.ReadEntity() local strg = net.ReadString() local Gtue = net.ReadBool() if IsValid( ply ) then ply:SetNWBool( strg, Gtue ) end end)   function A_AM.ActMod:Tast_SvToCl_restuo( ply,FaTime ) ply.Aa_TimeFiledLod = CurTime() + 30 if IsValid( ply ) then ply:SetNWBool( "A_ActMod_RedyUse", false ) ply:SetNWInt( "A_ActMod_RedyUse_Num", 0 ) local GMdl = "models/player/kleiner.mdl" if file.Exists("models/player/d1anim_m.mdl", "GAME") then GMdl = "models/player/d1anim_m.mdl" end local function Tast_Seq_restuo(sstr) local cl_ActEntDemo = ClientsideModel(GMdl, RENDERGROUP_OTHER) cl_ActEntDemo:SetModel(GMdl) cl_ActEntDemo:ResetSequence(cl_ActEntDemo:LookupSequence(sstr)) cl_ActEntDemo:SetNoDraw( true ) local GetSeq_EACT = cl_ActEntDemo:GetSequenceInfo( cl_ActEntDemo:GetSequence() ).label cl_ActEntDemo:Remove() return GetSeq_EACT == sstr end local function Tast_Precache(pch,typ) for name, filename in pairs(file.Find(pch..(typ == "model" and "/*.mdl" or "/*.*") , "GAME")) do if typ == "sound" then util.PrecacheSound(pch..string.lower(filename)) end if typ == "model" then util.PrecacheModel(pch..string.lower(filename)) end end end local function Tast_PrecacheMaterial(pch,tyx,typ) 		local Thh = 30 		local Panel = vgui.Create("DLabel") 		Panel:SetSize( 400, 400 ) Panel:SetAlpha(0) 		Panel.Paint = function ( s, w, h ) draw.RoundedBox( 10, 0, 0, w, h, Color(50,100,150,255) ) end  		local Scroll = vgui.Create( "DScrollPanel", Panel ) 		Scroll:SetPos( 5, 5 ) 		Scroll:SetSize( Panel:GetWide()-10, Panel:GetTall()-10 ) 		Scroll.Paint = function ( s, w, h ) end 		local b = Scroll:GetVBar() function b.btnUp:Paint( w, h ) end function b.btnDown:Paint( w, h ) end 		function b:Paint( w, h ) draw.RoundedBox( 0, w/2-2, 0, 5, h, Color( 0, 0, 0, 50 ) ) end 		function b.btnGrip:Paint( w, h ) draw.RoundedBox( 4, w/2-3, 0, 6, h, Color( 0, 0, 0, 200 ) ) end 		 		local AScale = 30 		local List local Buttons = {} 		List = vgui.Create( "DIconLayout", Scroll ) 		List:SetPos( 0, 0 ) List:SetSize( Scroll:GetWide(), Scroll:GetTall() ) 		List:SetSpaceY( AScale/4 ) List:SetSpaceX( AScale/4 ) 		 		local function MakeButton(Name) 			local ListItem = List:Add( "DButton" ) 			table.insert(Buttons, ListItem) 			ListItem:SetSize( AScale, AScale ) 			ListItem:SetText("") 			ListItem.file = Name 			local ttmp 			if typ then ttmp = Material(pch.."/"..Name) else ttmp = Material(pch.."/"..Name, "noclamp smooth") end 			ListItem.Material = ttmp 			ListItem.Paint = function ( s, w, h ) 				if !s.Material then return end 				surface.SetDrawColor(color_white) 				surface.SetMaterial( s.Material ) 				surface.DrawTexturedRect(0, 0, w, h) 			end 			ttmp = nil 		end  local Actimenu = {} 	for _,v in pairs(file.Find( typ and ("materials/"..pch.."/*.vmt") or("materials/"..pch.."/*.png"), "GAME" )) do 	if !table.HasValue(Actimenu, v) then 	if tyx then 		if tyx == "taunt_" and string.find(v, "taunt_") and !string.find(v, "amod_") then table.insert(Actimenu, v) 		elseif tyx == "f_" and string.find(v, "f_") and !(string.find(v, "._mo_.") or string.find(v, "._ef_.") or string.find(v, "._so_.")) then table.insert(Actimenu, v) 		elseif tyx == "f__mo_" and string.find(v, "f_") and !string.find(v, "original_dance") and !string.find(v, "amod_") and (string.find(v, "._mo_.") or string.find(v, "._ef_.") or string.find(v, "._so_.")) then table.insert(Actimenu, v) 		elseif tyx == "original_dance" and string.find(v, "original_dance") then table.insert(Actimenu, v) 		elseif tyx == "amod_" and string.find(v, "amod_") and !string.find(v, "amod_mixamo") and !string.find(v, "amod_mmd") and !string.find(v, "amod_fortnite") then table.insert(Actimenu, v) 		elseif tyx == "amod_mixamo" and string.find(v, "amod_mixamo") then table.insert(Actimenu, v) 		elseif tyx == "amod_mmd" and string.find(v, "amod_mmd") then table.insert(Actimenu, v) 		elseif tyx == "amod_fortnite" and string.find(v, "amod_fortnite") then table.insert(Actimenu, v) 		elseif tyx == "wos_tf2_" and string.find(v, "wos_tf2_") then table.insert(Actimenu, v) 		elseif !tyx then table.insert(Actimenu, v) 		end 	else table.insert(Actimenu, v) end 		end 	end 	for k,v in pairs(Actimenu or {}) do MakeButton(v) end Actimenu = nil 	return Panel end  local function Set_Seq_restuo(pply,sstr,ttrue) 	net.Start( "A_AM.ActMod.ClToSv_restuo" ) net.WriteEntity( pply ) net.WriteString( sstr ) net.WriteBool( ttrue ) net.SendToServer() end local function Get_net_NWBool(pply,sstr) 	net.Start( "A_AM.ActMod.ClToSv_NWBool" ) net.WriteEntity( pply ) net.WriteString( sstr ) net.WriteString( "A_ActMod."..sstr.."__cl" ) net.SendToServer() end  if engine.ActiveGamemode() != "sandbox" or GetConVarNumber("actmod_cl_enloading") == 0 then timer.Simple(0.2, function() if IsValid(ply) then timer.Simple(FaTime and 0.2 or 1.5, function() if IsValid(ply) then Get_net_NWBool(ply,"GetSeqTr_SV_Base") timer.Simple(0.1, function() if IsValid(ply) then Get_net_NWBool(ply,"GetSeqTr_SV_Base_Setxdr") ply:SetNWInt( "A_ActMod_RedyUse_Num", 10 ) timer.Simple(0.05, function() if IsValid(ply) then Get_net_NWBool(ply,"GetSeqTr_SV_BAM4") ply:SetNWInt( "A_ActMod_RedyUse_Num", 14 ) timer.Simple(0.05, function() if IsValid(ply) then Get_net_NWBool(ply,"GetSeqTr_SV_ECTE") ply:SetNWInt( "A_ActMod_RedyUse_Num", 17 ) timer.Simple(0.07, function() if IsValid(ply) then Get_net_NWBool(ply,"GetSeqTr_SV_EAM4") ply:SetNWInt( "A_ActMod_RedyUse_Num", 20 )  timer.Simple(0.1, function() if IsValid(ply) then Get_net_NWBool(ply,"GetMDLTr_SV_Base") ply:SetNWInt( "A_ActMod_RedyUse_Num", 26 ) timer.Simple(0.05, function() if IsValid(ply) then Get_net_NWBool(ply,"GetMDLTr_SV_BAM4") ply:SetNWInt( "A_ActMod_RedyUse_Num", 31 ) timer.Simple(0.08, function() if IsValid(ply) then Get_net_NWBool(ply,"GetMDLTr_SV_ECTE") ply:SetNWInt( "A_ActMod_RedyUse_Num", 38 ) timer.Simple(0.05, function() if IsValid(ply) then Get_net_NWBool(ply,"GetMDLTr_SV_EAM4") ply:SetNWInt( "A_ActMod_RedyUse_Num", 42 )  timer.Simple(0.1, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 52 ) if (!file.Exists( "models/m_xda.mdl", "GAME") and !file.Exists( "models/player/wiltos/anim_base.mdl", "GAME")) then Set_Seq_restuo(ply,"A_ActMod.GetMDLTr_SXdr",false) else Set_Seq_restuo(ply,"A_ActMod.GetMDLTr_SXdr",true) if Tast_Seq_restuo("xdreanims_enabled") == true then Set_Seq_restuo(ply,"A_ActMod.GetMDLTr_Setxdr",true) else Set_Seq_restuo(ply,"A_ActMod.GetMDLTr_Setxdr",false) end end timer.Simple(0.05, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 57 ) if !file.Exists( "models/player/custom_taunt/fortnite3.mdl", "GAME") then Set_Seq_restuo(ply,"A_ActMod.GetMDLTr_CTE",false) else Set_Seq_restuo(ply,"A_ActMod.GetMDLTr_CTE",true) end timer.Simple(0.05, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 59 ) if !file.Exists( "models/player/wiltos/anim_extension_mod13.mdl", "GAME") then Set_Seq_restuo(ply,"A_ActMod.GetMDLTr_TF2",false) else Set_Seq_restuo(ply,"A_ActMod.GetMDLTr_TF2",true) end timer.Simple(0.05, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 61 ) if !file.Exists( "models/player/ani_am4/ani_base.mdl", "GAME") or !file.Exists( "models/player/ani_am4/ani_base.ani", "GAME") or !file.Exists( "models/player/ani_am4/ani_base_f.mdl", "GAME") or !file.Exists( "models/player/ani_am4/ani_base_m.mdl", "GAME") then Set_Seq_restuo(ply,"A_ActMod.GetMDLTr_BAM4",false) else Set_Seq_restuo(ply,"A_ActMod.GetMDLTr_BAM4",true) end timer.Simple(0.1, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 65 ) if !file.Exists( "models/player/ani_am4/add_taunt/anim_m_01.mdl", "GAME") or !file.Exists( "models/player/ani_am4/add_taunt/anim_f_01.mdl", "GAME") or !file.Exists( "models/player/ani_am4/add_taunt/anim_m_01.mdl", "GAME") then Set_Seq_restuo(ply,"A_ActMod.GetMDLTr_Pack",false) else Set_Seq_restuo(ply,"A_ActMod.GetMDLTr_Pack",true) end timer.Simple(0.05, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 67 ) if !file.Exists( "sound/mmd/original_dance12.mp3", "GAME") then Set_Seq_restuo(ply,"A_ActMod.GetSodTr_CTM",false) else Set_Seq_restuo(ply,"A_ActMod.GetSodTr_CTM",true) end timer.Simple(0.05, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 68 ) if !file.Exists( "sound/actmod/i_act/fortnite/f_dust_off_shoulders.mp3", "GAME") or !file.Exists( "sound/actmod/i_act/am4/amod_taunt_quagmire.mp3", "GAME") then Set_Seq_restuo(ply,"A_ActMod.GetSodTr_Pack",false) else Set_Seq_restuo(ply,"A_ActMod.GetSodTr_Pack",true) end  timer.Simple(0.1, function() if IsValid(ply) then if (Tast_Seq_restuo("_base_wiltos_enabled_") == true or Tast_Seq_restuo("xdreanims_enabled") == true or (Tast_Seq_restuo("Amod_Custom_sit") == true and Tast_Seq_restuo("Cry") == true )) then Set_Seq_restuo(ply,"A_ActMod.GetSeqTr_Base",true) else Set_Seq_restuo(ply,"A_ActMod.GetSeqTr_Base",false) end ply:SetNWInt( "A_ActMod_RedyUse_Num", 70 ) timer.Simple(0.04, function() if IsValid(ply) then if Tast_Seq_restuo("am4_enabled") == true then Set_Seq_restuo(ply,"A_ActMod.GetSeqTr_BaseAM4",true) else Set_Seq_restuo(ply,"A_ActMod.GetSeqTr_BaseAM4",false) end ply:SetNWInt( "A_ActMod_RedyUse_Num", 71 ) timer.Simple(0.04, function() if IsValid(ply) then if Tast_Seq_restuo("f_ThumbsUp") == true then Set_Seq_restuo(ply,"A_ActMod.GetSeqTr_ECTE",true) else Set_Seq_restuo(ply,"A_ActMod.GetSeqTr_ECTE",false) end ply:SetNWInt( "A_ActMod_RedyUse_Num", 72 ) timer.Simple(0.04, function() if IsValid(ply) then if Tast_Seq_restuo("wos_tf2_demo_taunt_mannrobics_straight") == true then Set_Seq_restuo(ply,"A_ActMod.GetSeqTr_ETF2",true) else Set_Seq_restuo(ply,"A_ActMod.GetSeqTr_ETF2",false) end ply:SetNWInt( "A_ActMod_RedyUse_Num", 72 ) timer.Simple(0.04, function() if IsValid(ply) then if Tast_Seq_restuo("Amod_Dance_Macarena") == true then Set_Seq_restuo(ply,"A_ActMod.GetSeqTr_EAM4",true) else Set_Seq_restuo(ply,"A_ActMod.GetSeqTr_EAM4",false) end ply:SetNWInt( "A_ActMod_RedyUse_Num", 73 ) timer.Simple(0.2, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 100 ) timer.Simple(0.4, function() if IsValid(ply) then ply:SetNWBool( "A_ActMod_RedyUse", true ) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) else 	local bF = A_AM.ActMod.Settings["IconsActs"]  timer.Simple(0.2, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 6 ) timer.Simple(FaTime and 0.1 or 0.6, function() if IsValid(ply) then Get_net_NWBool(ply,"GetSeqTr_SV_Base") timer.Simple(0.1, function() if IsValid(ply) then Get_net_NWBool(ply,"GetSeqTr_SV_Base_Setxdr") ply:SetNWInt( "A_ActMod_RedyUse_Num", 10 ) timer.Simple(0.1, function() if IsValid(ply) then Get_net_NWBool(ply,"GetSeqTr_SV_BAM4") ply:SetNWInt( "A_ActMod_RedyUse_Num", 14 ) timer.Simple(0.1, function() if IsValid(ply) then Get_net_NWBool(ply,"GetSeqTr_SV_ECTE") ply:SetNWInt( "A_ActMod_RedyUse_Num", 17 ) timer.Simple(0.1, function() if IsValid(ply) then Get_net_NWBool(ply,"GetSeqTr_SV_EAM4") ply:SetNWInt( "A_ActMod_RedyUse_Num", 20 )  timer.Simple(0.2, function() if IsValid(ply) then Get_net_NWBool(ply,"GetMDLTr_SV_Base") ply:SetNWInt( "A_ActMod_RedyUse_Num", 26 ) timer.Simple(0.1, function() if IsValid(ply) then Get_net_NWBool(ply,"GetMDLTr_SV_BAM4") ply:SetNWInt( "A_ActMod_RedyUse_Num", 31 ) timer.Simple(0.1, function() if IsValid(ply) then Get_net_NWBool(ply,"GetMDLTr_SV_ECTE") ply:SetNWInt( "A_ActMod_RedyUse_Num", 32 ) timer.Simple(0.1, function() if IsValid(ply) then Get_net_NWBool(ply,"GetMDLTr_SV_EAM4") ply:SetNWInt( "A_ActMod_RedyUse_Num", 34 )  timer.Simple(0.2, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 36 ) if (!file.Exists( "models/m_xda.mdl", "GAME") and !file.Exists( "models/player/wiltos/anim_base.mdl", "GAME")) then Set_Seq_restuo(ply,"A_ActMod.GetMDLTr_SXdr",false) else Set_Seq_restuo(ply,"A_ActMod.GetMDLTr_SXdr",true) if Tast_Seq_restuo("xdreanims_enabled") == true then Set_Seq_restuo(ply,"A_ActMod.GetMDLTr_Setxdr",true) else Set_Seq_restuo(ply,"A_ActMod.GetMDLTr_Setxdr",false) end end timer.Simple(0.1, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 38 ) if !file.Exists( "models/player/custom_taunt/fortnite3.mdl", "GAME") then Set_Seq_restuo(ply,"A_ActMod.GetMDLTr_CTE",false) else Set_Seq_restuo(ply,"A_ActMod.GetMDLTr_CTE",true) end timer.Simple(0.1, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 40 ) if !file.Exists( "models/player/wiltos/anim_extension_mod13.mdl", "GAME") then Set_Seq_restuo(ply,"A_ActMod.GetMDLTr_TF2",false) else Set_Seq_restuo(ply,"A_ActMod.GetMDLTr_TF2",true) end timer.Simple(0.1, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 42 ) if !file.Exists( "models/player/ani_am4/ani_base.mdl", "GAME") or !file.Exists( "models/player/ani_am4/ani_base.ani", "GAME") or !file.Exists( "models/player/ani_am4/ani_base_f.mdl", "GAME") or !file.Exists( "models/player/ani_am4/ani_base_m.mdl", "GAME") then Set_Seq_restuo(ply,"A_ActMod.GetMDLTr_BAM4",false) else Set_Seq_restuo(ply,"A_ActMod.GetMDLTr_BAM4",true) end timer.Simple(0.1, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 44 ) if !file.Exists( "models/player/ani_am4/add_taunt/anim_m_01.mdl", "GAME") or !file.Exists( "models/player/ani_am4/add_taunt/anim_f_01.mdl", "GAME") or !file.Exists( "models/player/ani_am4/add_taunt/anim_m_01.mdl", "GAME") then Set_Seq_restuo(ply,"A_ActMod.GetMDLTr_Pack",false) else Set_Seq_restuo(ply,"A_ActMod.GetMDLTr_Pack",true) end timer.Simple(0.1, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 46 ) if !file.Exists( "sound/mmd/original_dance12.mp3", "GAME") then Set_Seq_restuo(ply,"A_ActMod.GetSodTr_CTM",false) else Set_Seq_restuo(ply,"A_ActMod.GetSodTr_CTM",true) end timer.Simple(0.1, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 48 ) if !file.Exists( "sound/actmod/i_act/fortnite/f_dust_off_shoulders.mp3", "GAME") or !file.Exists( "sound/actmod/i_act/am4/amod_taunt_quagmire.mp3", "GAME") then Set_Seq_restuo(ply,"A_ActMod.GetSodTr_Pack",false) else Set_Seq_restuo(ply,"A_ActMod.GetSodTr_Pack",true) end  timer.Simple(0.2, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 49 ) if (Tast_Seq_restuo("_base_wiltos_enabled_") == true or Tast_Seq_restuo("xdreanims_enabled") == true or (Tast_Seq_restuo("Amod_Custom_sit") == true and Tast_Seq_restuo("Cry") == true )) then Set_Seq_restuo(ply,"A_ActMod.GetSeqTr_Base",true) else Set_Seq_restuo(ply,"A_ActMod.GetSeqTr_Base",false) end ply:SetNWInt( "A_ActMod_RedyUse_Num", 50 ) timer.Simple(0.04, function() if IsValid(ply) then if Tast_Seq_restuo("am4_enabled") == true then Set_Seq_restuo(ply,"A_ActMod.GetSeqTr_BaseAM4",true) else Set_Seq_restuo(ply,"A_ActMod.GetSeqTr_BaseAM4",false) end ply:SetNWInt( "A_ActMod_RedyUse_Num", 52 ) timer.Simple(0.04, function() if IsValid(ply) then if Tast_Seq_restuo("f_ThumbsUp") == true then Set_Seq_restuo(ply,"A_ActMod.GetSeqTr_ECTE",true) else Set_Seq_restuo(ply,"A_ActMod.GetSeqTr_ECTE",false) end ply:SetNWInt( "A_ActMod_RedyUse_Num", 54 ) timer.Simple(0.04, function() if IsValid(ply) then if Tast_Seq_restuo("wos_tf2_demo_taunt_mannrobics_straight") == true then Set_Seq_restuo(ply,"A_ActMod.GetSeqTr_ETF2",true) else Set_Seq_restuo(ply,"A_ActMod.GetSeqTr_ETF2",false) end ply:SetNWInt( "A_ActMod_RedyUse_Num", 56 ) timer.Simple(0.04, function() if IsValid(ply) then if Tast_Seq_restuo("Amod_Dance_Macarena") == true then Set_Seq_restuo(ply,"A_ActMod.GetSeqTr_EAM4",true) else Set_Seq_restuo(ply,"A_ActMod.GetSeqTr_EAM4",false) end ply:SetNWInt( "A_ActMod_RedyUse_Num", 58 )  timer.Simple(0.1, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 60 ) Tast_Precache("sound/actmod/i_menu","sound") timer.Simple(0.1, function() if IsValid(ply) then if file.Exists( "sound/actmod/i_act/fortnite/f_dust_off_shoulders.mp3", "GAME") then Tast_Precache("sound/actmod/i_act/am4","sound") Tast_Precache("sound/actmod/i_act/am4/fortnite","sound") timer.Simple(0.1, function() if IsValid(ply) then Tast_Precache("sound/actmod/i_act/am4/mmd","sound") Tast_Precache("sound/actmod/i_act/fortnite","sound") end end) end timer.Simple(0.1, function() if IsValid(ply) then if file.Exists( "sound/mmd/original_dance12.mp3", "GAME") then Tast_Precache("sound/mmd","sound") end timer.Simple(0.1, function() if IsValid(ply) then Tast_Precache("models/actmod","model") end end) end end) end end)  timer.Simple(0.3, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 64 ) timer.Simple(0.1, function() if IsValid(ply) then ply.Tasti = Tast_PrecacheMaterial(bF,"taunt_") timer.Simple(0.2, function() if IsValid(ply) then if IsValid(ply.Tasti) then ply.Tasti:Remove() ply.Tasti = nil end ply:SetNWInt( "A_ActMod_RedyUse_Num", 66 ) timer.Simple(0.1, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 67 ) timer.Simple(0.1, function() if IsValid(ply) then ply.Tasti = Tast_PrecacheMaterial(bF,"f_") timer.Simple(0.2, function() if IsValid(ply) then if IsValid(ply.Tasti) then ply.Tasti:Remove() ply.Tasti = nil end ply:SetNWInt( "A_ActMod_RedyUse_Num", 70 ) timer.Simple(0.1, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 71 ) timer.Simple(0.1, function() if IsValid(ply) then ply.Tasti = Tast_PrecacheMaterial(bF,"original_dance") timer.Simple(0.2, function() if IsValid(ply) then if IsValid(ply.Tasti) then ply.Tasti:Remove() ply.Tasti = nil end ply:SetNWInt( "A_ActMod_RedyUse_Num", 73 ) timer.Simple(0.1, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 74 ) timer.Simple(0.1, function() if IsValid(ply) then ply.Tasti = Tast_PrecacheMaterial(bF,"amod_") timer.Simple(0.1, function() if IsValid(ply) then if IsValid(ply.Tasti) then ply.Tasti:Remove() ply.Tasti = nil end ply:SetNWInt( "A_ActMod_RedyUse_Num", 78 ) timer.Simple(0.1, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 79 ) timer.Simple(0.1, function() if IsValid(ply) then ply.Tasti = Tast_PrecacheMaterial(bF,"amod_pubg_") timer.Simple(0.1, function() if IsValid(ply) then if IsValid(ply.Tasti) then ply.Tasti:Remove() ply.Tasti = nil end ply:SetNWInt( "A_ActMod_RedyUse_Num", 81 ) timer.Simple(0.1, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 82 ) timer.Simple(0.1, function() if IsValid(ply) then ply.Tasti = Tast_PrecacheMaterial(bF,"amod_mixamo_") timer.Simple(0.1, function() if IsValid(ply) then if IsValid(ply.Tasti) then ply.Tasti:Remove() ply.Tasti = nil end ply:SetNWInt( "A_ActMod_RedyUse_Num", 84 ) timer.Simple(0.1, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 85 ) timer.Simple(0.1, function() if IsValid(ply) then ply.Tasti = Tast_PrecacheMaterial(bF,"amod_mmd_") timer.Simple(0.1, function() if IsValid(ply) then if IsValid(ply.Tasti) then ply.Tasti:Remove() ply.Tasti = nil end ply:SetNWInt( "A_ActMod_RedyUse_Num", 87 ) timer.Simple(0.1, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 88 ) timer.Simple(0.1, function() if IsValid(ply) then ply.Tasti = Tast_PrecacheMaterial(bF,"amod_fortnite_") timer.Simple(0.1, function() if IsValid(ply) then if IsValid(ply.Tasti) then ply.Tasti:Remove() ply.Tasti = nil end ply:SetNWInt( "A_ActMod_RedyUse_Num", 89 ) timer.Simple(0.1, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 90 ) timer.Simple(0.1, function() if IsValid(ply) then ply.Tasti = Tast_PrecacheMaterial(bF,"wos_tf2_") timer.Simple(0.2, function() if IsValid(ply) then if IsValid(ply.Tasti) then ply.Tasti:Remove() ply.Tasti = nil end ply:SetNWInt( "A_ActMod_RedyUse_Num", 91 ) timer.Simple(0.1, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 93 ) timer.Simple(0.1, function() if IsValid(ply) then ply.Tasti = Tast_PrecacheMaterial("actmod/imenu") ply:SetNWInt( "A_ActMod_RedyUse_Num", 94 ) timer.Simple(0.2, function() if IsValid(ply) then if IsValid(ply.Tasti) then ply.Tasti:Remove() ply.Tasti = nil end ply:SetNWInt( "A_ActMod_RedyUse_Num", 95 ) timer.Simple(0.1, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 97 ) timer.Simple(0.1, function() if IsValid(ply) then ply.Tasti = Tast_PrecacheMaterial("actmod/eff_particle",nil,true) ply:SetNWInt( "A_ActMod_RedyUse_Num", 98 ) timer.Simple(0.2, function() if IsValid(ply) then if IsValid(ply.Tasti) then ply.Tasti:Remove() ply.Tasti = nil end ply:SetNWInt( "A_ActMod_RedyUse_Num", 99 ) timer.Simple(0.2, function() if IsValid(ply) then ply:SetNWInt( "A_ActMod_RedyUse_Num", 100 ) timer.Simple(0.8, function() if IsValid(ply) then ply:SetNWBool( "A_ActMod_RedyUse", true ) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end) end end)  end  end end   function A_AM.ActMod.ClServroF(ply,t2) 	A_AM.ActMod.HFGtrue = nil 	A_AM.ActMod.ActuLck = nil 	A_AM.ActMod.ActuAck = nil 	A_AM.ActMod.TVersion = nil 	A_AM.ActMod.autDon = nil 	A_AM.ActMod.autDon_URL = nil 	A_AM.ActMod.autDon_URL_Y = nil 	A_AM.ActMod.autDon_URL_B = nil 	ply.ActMod_TabS1 = {} 	ply.ActMod_TabTSrvr = 0 	A_AM.ActMod.Aptmp["Avs_a1_1"]["png"] = "entities/npc_zombie.png" 	A_AM.ActMod.Aptmp["Avs_a1_2"]["lng"] = "LAchievements_a1_m2_n1" 	if t2 and A_AM.ActMod.ReHFG and A_AM.ActMod.ReHFG == 0 then 		A_AM.ActMod.ReHFG = A_AM.ActMod.ReHFG + 1 		A_AM.ActMod.ClServro(ply) 	else 		A_AM.ActMod.ReHFG = 0 		ply:ConCommand("actmod_wts CToS_SvCTSvr ".. ply:EntIndex() .." ".. ply.ActMod_TabTSrvr .."\n") 	end end function A_AM.ActMod.ClServroC(ply,commit) 	if commit.iName and commit.iConnect and commit.On then 		if ply.ActMod_TabS1 then 			ply.ActMod_TabS1["SVAM4_Name"] = commit["iName"] 			ply.ActMod_TabS1["SVAM4_Connect"] = commit["iConnect"] 			ply.ActMod_TabS1["SVAM4_On"] = commit["On"] 		end 		if commit["On"] == "Active" then 			if commit["iName"] == "[AM4] ZombieSurvival +Bots and maps obj" then 				ply.ActMod_TabTSrvr = 1 				A_AM.ActMod.Aptmp["Avs_a1_1"]["png"] = "hud/killicons/default" 				A_AM.ActMod.Aptmp["Avs_a1_2"]["lng"] = "LAchievements_a1_m2" 			else 				ply.ActMod_TabTSrvr = 2 				A_AM.ActMod.Aptmp["Avs_a1_1"]["png"] = "entities/npc_zombie.png" 				A_AM.ActMod.Aptmp["Avs_a1_2"]["lng"] = "LAchievements_a1_m2_n1" 			end 		else 			ply.ActMod_TabTSrvr = 0 			A_AM.ActMod.Aptmp["Avs_a1_1"]["png"] = "entities/npc_zombie.png" 			A_AM.ActMod.Aptmp["Avs_a1_2"]["lng"] = "LAchievements_a1_m2_n1" 		end 	else 		ply.ActMod_TabTSrvr = 0 		ply.ActMod_TabS1 = {} 		A_AM.ActMod.Aptmp["Avs_a1_1"]["png"] = "entities/npc_zombie.png" 		A_AM.ActMod.Aptmp["Avs_a1_2"]["lng"] = "LAchievements_a1_m2_n1" 	end 	if commit.ina then 		A_AM.ActMod.ActuLck = {} 		for k, v in pairs(commit["ina"]) do 			A_AM.ActMod.ActuLck[k] = v 		end 		A_AM.ActMod.ActuLck["AM4_Avs"] = true 	end 	if commit.adi then 		A_AM.ActMod.ActuAck = {} 		for k, v in pairs(commit["adi"]) do 			A_AM.ActMod.ActuAck[k] = v 		end 		A_AM.ActMod.ActuAck["AM4_Avs"] = true 	end 	if commit.GTea then 		A_AM.ActMod.autDon = commit["GTea"] 	else 		A_AM.ActMod.autDon = nil 	end 	if commit.GTea_URL then 		A_AM.ActMod.autDon_URL = commit["GTea_URL"] 	else 		A_AM.ActMod.autDon_URL = nil 	end 	if commit.URLV_Y then 		A_AM.ActMod.autDon_URL_Y = commit["URLV_Y"] 	else 		A_AM.ActMod.autDon_URL_Y = nil 	end 	if commit.URLV_B then 		A_AM.ActMod.autDon_URL_B = commit["URLV_B"] 	else 		A_AM.ActMod.autDon_URL_B = nil 	end 	if commit.Version then 		A_AM.ActMod.TVersion = commit["Version"] 		A_AM.ActMod.HFGtrue = true 		if timer.Exists("ATmp_https") then 			timer.Remove("ATmp_https") 		end 	else 		A_AM.ActMod.TVersion = nil 	end 	ply:ConCommand("actmod_wts CToS_SvCTSvr ".. ply:EntIndex() .." ".. ply.ActMod_TabTSrvr .."\n") end function A_AM.ActMod.ClServro(ply) 	ply.ActMod_TabS1 = ply.ActMod_TabS1 or {} 	local ReHF = "" 	if A_AM.ActMod.ReHFG and A_AM.ActMod.ReHFG == 0 then 		ReHF = "https://pastebin.com/raw/ZGMXWECH" 	else 		ReHF = "https://raw.githubusercontent.com/AhmedGitHub400/VersionAddonsAM4/main/ActMod/gdat.txt" 	end 	http.Fetch(ReHF, function(body, _, _, code) 		local commit = util.JSONToTable(A_AM.ActMod:AG_BED(2,body)) 		if commit and commit.Version and commit.By then 			if string.find(string.sub(commit["By"], 1, 12), "AhmedMake400") then 				A_AM.ActMod.ClServroC(ply,commit) 			else 				A_AM.ActMod.ClServroF(ply,true) 			end 		else 			A_AM.ActMod.ClServroF(ply,true) 		end 	end, function() 		A_AM.ActMod.ClServroF(ply,true) 	end ) end  function A_AM.ActMod.ClRestuo(ply,ftim) 	A_AM.ActMod.Aatmp = [[{ 	  "inopn": "ActMod [AM4]", 	  "IDPly": "]].. ply:SteamID64() ..[[", 	  "Avs_a1_1": {"ok": "no","ing": 0}, 	  "Avs_a1_2": {"ok": "no","ing": 0}, 	  "Avs_a1_3": {"ok": "no","ing": 0}, 	  "Avs_a2_1": {"ok": "no","ing": 0}, 	  "Avs_a2_2": {"ok": "no","ing": 0}, 	  "Avs_a2_3": {"ok": "no","ing": 0}, 	  "Avs_a2_4": {"ok": "no","ing": 0}, 	  "Avs_a2_5": {"ok": "no","ing": 0}, 	  "Avs_a2_6": {"ok": "no","ing": 0}, 	  "Avs_a2_7": {"ok": "no","ing": 0}, 	  "Avs_a2_8": {"ok": "no","ing": 0}, 	  "Avs_a2_9": {"ok": "no","ing": 0}, 	  "Avs_a3_1": {"ok": "no","ing": 0}, 	  "Avs_a3_2": {"ok": "no","ing": 0}, 	  "Avs_a3_3": {"ok": "no","ing": 0}, 	  "Avs_a3_4": {"ok": "no","ing": 0}, 	  "By": "]].. A_AM.ActMod.Mounted[ "Version ActMod" ] ..[[", 	  "V": "9.4" 	}]] 	if IsValid( ply ) then 		ply:SetNWInt( "A_ActMod.IMeun_Num", 1 ) ply:SetNWInt( "A_ActMod.Select_Base", 1 ) 		timer.Create("Acl_t1",1.5,1,function() if IsValid(ply) and A_AM.ActMod.Aatmp and A_AM.ActMod.Aptmp then A_AM.ActMod:A_ReGD() end end) 		local cl_s,cl_e,cl_l = 0,0,0 		if GetConVarNumber("actmod_cl_sound") == 1 then ply:SetNWBool("A_ActMod_cl_Sound",true) cl_s = 1 else ply:SetNWBool("A_ActMod_cl_Sound",false) end 		if GetConVarNumber("actmod_cl_effects") == 1 then ply:SetNWBool("A_ActMod_cl_Effects",true) cl_e = 1 else ply:SetNWBool("A_ActMod_cl_Effects",false) end 		if GetConVarNumber("actmod_cl_loop") == 1 then ply:SetNWInt("A_ActMod_cl_Loop",1) cl_l = 1 elseif GetConVarNumber("actmod_cl_loop") == 2 then ply:SetNWInt("A_ActMod_cl_Loop",2) cl_l = 2 else ply:SetNWInt("A_ActMod_cl_Loop",0) end 		if GetConVar("actmod_sy_tovs"):GetInt() == 3 then 			net.Start( "A_AM.ActMod.CToS_ST" ) 			 net.WriteEntity( NULL ) 			 net.WriteString( "CToS_" ) 			 net.WriteTable( {"wts_SEL",cl_s,cl_e,cl_l} ) 			net.SendToServer() 		else 			ply:ConCommand("actmod_wts wts_SEL ".. cl_s .. cl_e .. cl_l .."\n") 		end 		ply.ActMod_RLAng = 0 		ply.ActMod_TabTSrvr = 0 		ply.ActMod_TastAng = 0 		ply.A_ActMod_GetDir = nil 		PResetColcted(ply) 		ply.ActMod_Table_Ply = ply.ActMod_Table_Ply or {} 		A_AM.ActMod.ReHFG = 0 		A_AM.ActMod.ClServro(ply) 		if timer.Exists( "AA_Reflsh" ) then timer.Remove( "AA_Reflsh" ) end 		timer.Create("AA_Reflsh",60,0,function() 			if IsValid(ply) then 				A_AM.ActMod.ReHFG = 0 				A_AM.ActMod.ClServro(ply) 			end 		end) 		A_AM.ActMod.ClServro(ply) 		if ftim == "isHost" then ply.ActMod_PlyIsHost = true end 		timer.Create("AA_Sutp_restuo",0.3,1,function() 			if IsValid(ply) then 				A_AM.ActMod:Tast_SvToCl_restuo(ply,ftim == "true" and true) 			end 		end) 	end end net.Receive( "A_AM.ActMod.SvToCl_restuo", function() 	local ftim = net.ReadString() 	A_AM.ActMod.ClRestuo(LocalPlayer(),net.ReadString()) end)  local function CLPrint(Pl_,Tx1,Tx2,Gi) if Gi and Gi != 0 then if Gi == 1 then Pl_:PrintMessage( 3,Tx1) elseif Gi == 2 then Pl_:PrintMessage( 4,Tx1) end else Pl_:PrintMessage( 3," ") Pl_:PrintMessage( 3,"========(ActMod)==========") Pl_:PrintMessage( 3,Tx1) if Tx2 then Pl_:PrintMessage( 3,Tx2) end Pl_:PrintMessage( 3,"==========================") Pl_:PrintMessage( 3," ") end end   function A_AM.ActMod:SP_iError( ply,strg ) if strg == "bse" then CLPrint(ply,"You do not subscribe to any of the following:" , " ( wOS-Base )  or  ( xdR-Base )") elseif strg == "ynbse" then CLPrint(ply,"It is not recognized animation from :" , " ( wOS-Base )  or  ( xdR-Base )") elseif strg == "svbse" then CLPrint(ply,"The Server not have any of the following :" , " ( wOS-Base )  or  ( xdR-Base )") elseif strg == "ae" then CLPrint(ply,"You did not subscribe to :" , "[wOS] Animation Extension - Custom Taunt") elseif strg == "ynae" then CLPrint(ply,"It is not recognized animation from :" , "[wOS] Animation Extension - Custom Taunt") elseif strg == "svae" then CLPrint(ply,"The Server not have :" , "[wOS] Animation Extension - Custom Taunt") elseif strg == "cmt" then CLPrint(ply,"You did not subscribe to :" , "Custom Taunt (Music)") elseif strg == "bs_tf2" then CLPrint(ply,"You did not subscribe to :" , "[wOS] Animation Extension - Team Fortress 2") elseif strg == "etf2" then CLPrint(ply,"It is not recognized animation from :" , "[wOS] Animation Extension - Team Fortress 2") elseif strg == "sv_bs_tf2" then CLPrint(ply,"The Server not have :" , "[wOS] Animation Extension - Team Fortress 2") elseif strg == "bs_am4" then CLPrint(ply,"You did not subscribe to :" , "Base Anim-AM4") elseif strg == "eam4" then CLPrint(ply,"It is not recognized animation from :" , "Base Anim-AM4") elseif strg == "sv_bs_am4" then CLPrint(ply,"The Server not have :" , "Base Anim-AM4") elseif strg == "pkam4" then CLPrint(ply,"You did not subscribe to :" , "[(AM4-Anim)] Pack Animatoin for ActMod") elseif strg == "epkam4" then CLPrint(ply,"It is not recognized animation from :" , "[(AM4-Anim)] Pack Animatoin for ActMod") elseif strg == "sv_pk_am4" then CLPrint(ply,"The Server not have :" , "[(AM4-Anim)] Pack Animatoin for ActMod") elseif strg == "pkso" then CLPrint(ply,"You did not subscribe to :" , "Pack Sounds-Music for ActMod") elseif strg == "nwp" then CLPrint(ply,"Something prevents it from being used!") elseif strg == "nallow" then CLPrint(ply,"The server prevents the use of ActMod!") else if string.find(string.sub(strg,1 ,4), "!S_.") then local tYp = string.sub(strg,5 ,5) local sY = string.Replace(strg,string.sub(strg,1 ,5),"") CLPrint(ply,sY,nil,tonumber(tYp)) elseif string.find(string.sub(strg,1 ,4), "!T_.") then local tYp = string.sub(strg,5 ,5) local sY = string.Replace(strg,string.sub(strg,1 ,5),"") CLPrint(ply,aR:T(sY),nil,tonumber(tYp)) else CLPrint(ply,strg) end end end  net.Receive( "A_AM.ActMod.iError_cl", function(len) local strg = net.ReadString() if IsValid( LocalPlayer() ) and strg then A_AM.ActMod:SP_iError(LocalPlayer(),strg) end end )   net.Receive( "A_AM.ActMod.CallRestart", function() 	local ply = net.ReadEntity() 	if IsValid( ply ) then ply:SetCycle( 0 ) ply:AnimRestartMainSequence() end end ) net.Receive( "A_AM.ActMod.CallCycle", function() 	local ply = net.ReadEntity() 	local cyer = net.ReadFloat() 	if IsValid( ply ) then ply:SetCycle( cyer ) end end ) net.Receive( "A_AM.ActMod.CallCycleAEff", function() 	local ply = net.ReadEntity() 	local Tab = net.ReadTable() 	if IsValid( ply ) then 		ply:SetCycle( Tab[1] ) 		if Tab[3] == "1" then 			A_AM.ActMod:AA_AddEffects(ply,nil,Tab[2]) 			if Tab[4] == "1" then A_AM.ActMod:AA_AddModel( ply,Tab[2] ) end 		end 	end end )    local function A_aSond(pl,SSond,SettoG,aLevel,onSnd) 	local soundid 	if SettoG == "2" then soundid = pl.AAct_S2 	elseif SettoG == "3" then soundid = pl.AAct_S3 	else soundid = pl.AAct_S1 end 	if soundid then soundid:Stop() soundid = nil end 	soundid = CreateSound(pl, SSond) 	if soundid then 		if pl == LocalPlayer() then 			soundid:SetSoundLevel(GetConVarNumber("actmod_cl_soundlevel") or 75) 		else 			soundid:SetSoundLevel(aLevel) 		end 		if onSnd == "1" or (onSnd == "3" and pl:A_ActModSound() == true) then 			soundid:Play() soundid:PlayEx(1,100) 		else 			soundid:Stop() soundid = nil 		end 	end 	if SettoG == "2" then pl.AAct_S2 = soundid 	elseif SettoG == "3" then pl.AAct_S3 = soundid 	else pl.AAct_S1 = soundid 	end soundid = nil end  function A_AM.ActMod:A_aSond(pl,SSond,SettoG,aLevel,onSnd) 	A_aSond(pl,SSond,SettoG,aLevel,onSnd) end  function A_AM.ActMod:A_SFast(pl,str,Rate,Cycle,Cyclesv,So_1,So_2,So_3,So_4,Sond,Effe,Mdl,MMDOn) 	if pl == LocalPlayer() then A_AM.ActMod:A_StCamer(LocalPlayer()) end 	if MMDOn == "1" then 		pl.A_ActMod_GetDir = str 		pl:DoCustomAnimEvent( PLAYERANIMEVENT_CUSTOM, 101020 ) 	end 	A_AM.ActMod:AA_RemoveAdd( pl,true ) 	A_AM.ActMod:RemoveCrMdl( pl,"*" ) 	if Sond != "5" then 		if pl.AAct_S1 then pl.AAct_S1:Stop() pl.AAct_S1 = nil end 		if pl.AAct_S2 then pl.AAct_S2:Stop() pl.AAct_S2 = nil end 		if pl.AAct_S3 then pl.AAct_S3:Stop() pl.AAct_S3 = nil end 		if So_1 != "NonE" then 			if isstring(So_3) then tonumber(So_3) end 			A_aSond(pl,So_1,So_2,So_3,So_4) 		end 	end 	if Effe == "1" then A_AM.ActMod:AA_AddEffects(pl,nil,str) 		if Mdl == "1" then A_AM.ActMod:AA_AddModel( pl,str ) end 	end end    local function C_StopDance(pl,ply) 	if ply and pl == ply then 		ply.ActMod_RLAng = 0 		if ply.ActMod_BeetAng == true and ply.ActMod_DetAng != nil then ply:SetEyeAngles(ply.ActMod_DetAng) 		elseif ply.ActMod_GeetAng != nil then ply:SetEyeAngles(ply.ActMod_GeetAng) 		end 		local cl_s,cl_e,cl_l = 0,0,0 		if GetConVarNumber("actmod_cl_sound") == 1 then ply:SetNWBool("A_ActMod_cl_Sound",true) cl_s = 1 else ply:SetNWBool("A_ActMod_cl_Sound",false) end 		if GetConVarNumber("actmod_cl_effects") == 1 then ply:SetNWBool("A_ActMod_cl_Effects",true) cl_e = 1 else ply:SetNWBool("A_ActMod_cl_Effects",false) end 		if GetConVarNumber("actmod_cl_loop") == 1 then ply:SetNWInt("A_ActMod_cl_Loop",1) cl_l = 1 elseif GetConVarNumber("actmod_cl_loop") == 2 then ply:SetNWInt("A_ActMod_cl_Loop",2) cl_l = 2 else ply:SetNWInt("A_ActMod_cl_Loop",0) end 		if GetConVar("actmod_sy_tovs"):GetInt() == 3 then 			net.Start( "A_AM.ActMod.CToS_ST" ) 			 net.WriteEntity( NULL ) 			 net.WriteString( "CToS_" ) 			 net.WriteTable( {"wts_SEL",cl_s,cl_e,cl_l} ) 			net.SendToServer() 		else 			ply:ConCommand("actmod_wts wts_SEL ".. cl_s .. cl_e .. cl_l .."\n") 		end 		if IsValid(A_AM.ActMod.TauntCamera) then A_AM.ActMod.TauntCamera:Remove() end A_AM.ActMod.TauntCamera = nil 		ply.AGSped_f = 0 ply.AGSped_b = 0 	end 	pl:SetCycle( 0 ) 	pl.A_ActMod_GetDir = nil 	A_AM.ActMod:RemoveCrMdl( pl,"*" ) 	A_AM.ActMod:AA_RemoveAdd( pl,true ) end function A_AM.ActMod.ChknOff(ply) 	C_StopDance(ply,LocalPlayer()) end  local function Commt_Cl(ply,args) 	if args[1] == "SToC_aya" then 		if args[2] then 			A_AM.ActMod:StartSutEp(tonumber(args[2])) 		end 	elseif args[1] == "SToC_SFast" then 		local pl = Entity( args[2] ) 		if pl and IsValid(pl) and pl:IsPlayer() then 			A_AM.ActMod:A_SFast(pl,args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13],args[14]) 		end 	elseif args[1] == "SToC_CCyc" then 		local pl = Entity( args[2] ) 		if pl and IsValid(pl) and pl:IsPlayer() then 			local cyer = tonumber(args[3]) or 0 			local svcyer = tonumber(args[4]) or 0 			if svcyer == 0 then 				pl:SetNWInt( "A_AM.ActCycle", cyer ) pl:SetCycle( cyer ) 			else 				timer.Simple(0,function() if IsValid(pl) then pl:SetNWInt( "A_AM.ActCycle", cyer+svcyer ) pl:SetCycle( cyer+svcyer ) end end) 			end 		end 	elseif args[1] == "SToC_CCycAndEff" then 		local pl = Entity( args[2] ) 		if pl and IsValid(pl) and pl:IsPlayer() then 			local cyer = tonumber(args[3]) or 0 			local svcyer = tonumber(args[4]) or 0 			local str = args[5] or "" 			local AAr = args[6] or "0" 			local aRR = tonumber(args[7]) or 0 			if svcyer == 0 then 				pl:SetNWInt( "A_AM.ActCycle", cyer ) pl:SetCycle( cyer ) 			else 				timer.Simple(0,function() if IsValid(pl) then pl:SetNWInt( "A_AM.ActCycle", cyer+svcyer ) pl:SetCycle( cyer+svcyer ) end end) 			end 			A_AM.ActMod:AA_AddEffects(pl,tobool(AAr),str) 			if aRR == 1 then A_AM.ActMod:AA_AddModel( pl,str,tobool(AAr) ) end 		end 	elseif args[1] == "SToC_CReA" then 		local pl = Entity( args[2] ) 		if pl and IsValid(pl) and pl:IsPlayer() then 			pl:AnimRestartMainSequence() pl:SetPlaybackRate( 1 ) pl:SetCycle( 0 ) 			A_AM.ActMod:AA_RemoveAdd( pl,true ) 			end 	elseif args[1] == "SToC_SrCamr" then A_AM.ActMod:A_StCamer(ply) 	elseif args[1] == "SToC_actT" then 		local pl = Entity( args[2] ) 		local s1,s2 = "",1 		if pl and IsValid(pl) and pl:IsPlayer() then 			s1 = args[3] 			s2 = tonumber(args[4]) 			pl.A_ActMod_GetDir = s1 			pl:SetPlaybackRate( s2 ) 		end 		if GetConVar("actmod_sy_tovs_mmdfast"):GetInt() == 0 then A_AM.ActMod:A_StCamer(ply) end 	elseif args[1] == "wts_StartEffe" then 		local pl = Entity( args[2] ) 		if pl and IsValid(pl) and pl:IsPlayer() then 			local str = args[3] or "" 			local AAr = args[4] or "0" 			A_AM.ActMod:AA_AddEffects(pl,tobool(AAr),str) 		end 	elseif args[1] == "wts_StartSond" then 		local pl = Entity( args[2] ) 		if pl and IsValid(pl) and pl:IsPlayer() then 		local SettoG,aLevel,onSnd = args[3],75,args[6] or "3" 		if args[5] and isstring(args[5]) then aLevel = tonumber(args[5]) end 		if args[7] == "1" then 			if pl.AAct_S1 then pl.AAct_S1:Stop() pl.AAct_S1 = nil end 			if pl.AAct_S2 then pl.AAct_S2:Stop() pl.AAct_S2 = nil end 			if pl.AAct_S3 then pl.AAct_S3:Stop() pl.AAct_S3 = nil end 		end 		A_aSond(pl,args[4],SettoG,aLevel,onSnd) 		end 	elseif args[1] == "wts_StopSond" then 		local pl = Entity( args[2] ) 		if pl and IsValid(pl) and pl:IsPlayer() then 			local nor = args[3] 			if nor == "1" then if pl.AAct_S1 then pl.AAct_S1:Stop() pl.AAct_S1 = nil end 			elseif nor == "2" then if pl.AAct_S2 then pl.AAct_S2:Stop() pl.AAct_S2 = nil end 			elseif nor == "3" then if pl.AAct_S3 then pl.AAct_S3:Stop() pl.AAct_S3 = nil end 			elseif pl then if pl.AAct_S1 then pl.AAct_S1:Stop() pl.AAct_S1 = nil end if pl.AAct_S2 then pl.AAct_S2:Stop() pl.AAct_S2 = nil end if pl.AAct_S3 then pl.AAct_S3:Stop() pl.AAct_S3 = nil end 			end 		end 	elseif args[1] == "CToS_Sond" then 		local pl = Entity( args[2] ) 		if pl and IsValid(pl) and pl:IsPlayer() then 		if pl.AAct_S1 then pl.AAct_S1:Stop() pl.AAct_S1 = nil end 		if pl.AAct_S2 then pl.AAct_S2:Stop() pl.AAct_S2 = nil end 		end 	elseif args[1] == "wtc_End" then 		local pl = Entity( args[2] ) 		if pl and IsValid(pl) and pl:IsPlayer() then 			C_StopDance(pl,ply) 		end 	end end  net.Receive( "A_AM.ActMod.SToC_ST", function() 	local ply = LocalPlayer() 	local plt = net.ReadEntity() 	local str = net.ReadString() 	local tbl = net.ReadTable() 	if str == "SToC_" then 		if IsValid(ply) then 			Commt_Cl(ply,tbl) 		end 	end end )  concommand.Add("actmod_wtc", function(ply, cmd, args) 	if GetConVar("actmod_sy_tovs"):GetInt() != 1 and IsValid(ply) and ply:IsPlayer() then 		Commt_Cl(ply,args) 	end end)  if !ConVarExists("actmod_cl_showmasngerr") then CreateClientConVar("actmod_cl_showmasngerr", 1, true, false) end if !ConVarExists("actmod_cl_enloading") then CreateClientConVar("actmod_cl_enloading", 1, true, false) end if !ConVarExists("actmod_cl_menuformat") then CreateClientConVar("actmod_cl_menuformat", 1, true, false) end if !ConVarExists("actmod_cl_menuformat2") then CreateClientConVar("actmod_cl_menuformat2", 1, true, false) end if !ConVarExists("actmod_cl_loop") then CreateClientConVar("actmod_cl_loop", 2, true, false) end if !ConVarExists("actmod_cl_effects") then CreateClientConVar("actmod_cl_effects", 1, true, false) end if !ConVarExists("actmod_cl_sound") then CreateClientConVar("actmod_cl_sound", 1, true, false) end if !ConVarExists("actmod_cl_thememenu") then CreateClientConVar("actmod_cl_thememenu", 1, true, false) end if !ConVarExists("actmod_cl_stext") then CreateClientConVar("actmod_cl_stext", "taunt", true, false) end if !ConVarExists("actmod_cl_showmodl") then CreateClientConVar("actmod_cl_showmodl", 0, true, false) end if !ConVarExists("actmod_cl_sortemote") then CreateClientConVar("actmod_cl_sortemote", 1, true, false) end if !ConVarExists("actmod_cl_setcamera") then CreateClientConVar("actmod_cl_setcamera", 0, true, false) end if !ConVarExists("actmod_cl_smshcam_on") then CreateClientConVar("actmod_cl_smshcam_on", 0, true, false) end if !ConVarExists("actmod_cl_smshcam_sp") then CreateClientConVar("actmod_cl_smshcam_sp", 5, true, false) end if !ConVarExists("actmod_cl_showbhelp") then CreateClientConVar("actmod_cl_showbhelp", 1, true, false) end if !ConVarExists("actmod_cl_stibox") then CreateClientConVar("actmod_cl_stibox", 1, true, false) end if !ConVarExists("actmod_cl_lang") then CreateClientConVar("actmod_cl_lang", "none", true, false) end if !ConVarExists("actmod_cl_cam180") then CreateClientConVar("actmod_cl_cam180", 0, true, false) end if !ConVarExists("actmod_cl_soundlevel") then CreateClientConVar("actmod_cl_soundlevel", 75, true, false ,"min: 20  /  max: 100" ,20,100) end  local function AdCCb(ply,strg,Nval) 	if GetConVar("actmod_sy_tovs"):GetInt() == 1 then 		if strg == "CToS_Sond" then ply:SetNWBool("A_ActMod_cl_Sound",tobool(Nval)) 			net.Start( "A_AM.ActMod.ClToSv_sound" ) net.WriteEntity(ply) net.WriteBool(tobool(Nval)) net.SendToServer() 		elseif strg == "CToS_Effe" then ply:SetNWBool("A_ActMod_cl_Effects",tobool(Nval)) 			net.Start( "A_AM.ActMod.ClToSv_Effects" ) net.WriteEntity(ply) net.WriteBool(tobool(Nval)) net.SendToServer() 		elseif strg == "CToS_Loop" then ply:SetNWInt("A_ActMod_cl_Loop",Nval) 			net.Start( "A_AM.ActMod.ClToSv_loop" ) net.WriteEntity(LocalPlayer()) net.WriteFloat(Nval) net.SendToServer() 		end 	else 		RunConsoleCommand("actmod_wts",strg,tostring(Nval)) 	end end  cvars.AddChangeCallback("actmod_cl_sound", function(name, oldVal, newVal) if newVal == "1" then AdCCb(LocalPlayer(),"CToS_Sond",1) else AdCCb(LocalPlayer(),"CToS_Sond",0) end end)  cvars.AddChangeCallback("actmod_cl_effects", function(name, oldVal, newVal) if newVal == "1" then AdCCb(LocalPlayer(),"CToS_Effe",1) else AdCCb(LocalPlayer(),"CToS_Effe",0) end end)  cvars.AddChangeCallback("actmod_cl_loop", function(name, oldVal, newVal) if newVal == "1" then AdCCb(LocalPlayer(),"CToS_Loop",1) elseif newVal == "2" then AdCCb(LocalPlayer(),"CToS_Loop",2) else AdCCb(LocalPlayer(),"CToS_Loop",0) end end)  cvars.AddChangeCallback( Actoji.Prefix.."ActAllMatFolder", function() ActLoadIcons() LocalPlayer():ConCommand("Actoji.Clear") end )  	cvars.AddChangeCallback("actmod_cl_allowkey", function(name, oldVal, newVal) 		if newVal == "1" then 			if IsValid(LocalPlayer().pgh_loked.loked) then 				LocalPlayer().pgh_loked.loked:Remove() 				LocalPlayer().pgh_loked.loked = nil 			end 		else 			if IsValid(LocalPlayer().pgh_loked) and (LocalPlayer().gh_Ti or 0) < CurTime() then 				LocalPlayer().gh_Ti = CurTime() + 0.2 				LocalPlayer().pgh_loked.ALoked() 			end 		end 	end) end    if A_AM.ActMod.OneSutep == true then 	local function Chfg(txt,Gea,ez,nt) 		if file.Exists(txt, "LUA") then include(txt) end 	end 	if SERVER then 		Chfg("actmod/am_actmod_act.lua") 		Chfg("actmod/am_actmod_ent.lua") 		Chfg("actmod/am_actmod_avs.lua") 		Chfg("actmod/am_actmod_lan.lua") 		Chfg("actmod/am_actmod_hok.lua") 		Chfg("actmod/am_actmod_shr.lua") 	end 	if CLIENT then 		Chfg("actmod/am_actmod_act.lua") 		Chfg("actmod/am_actmod_ent.lua") 		Chfg("actmod/am_actmod_avs.lua") 		Chfg("actmod/am_actmod_fon.lua") 		Chfg("actmod/am_actmod_hok.lua") 		Chfg("actmod/am_actmod_lan.lua") 		Chfg("actmod/am_actmod_shr.lua") 		Chfg("actmod/am_actmod_vgi.lua") 	end end