AddCSLuaFile()


//				ActMod For Gmod
//			Creator: AhmedMake400
//
//	Is it permissible to amend or republish it ?  NO
//
//	Please do not follow anyone who tries to hack my work.
//	It is never allowed for anyone to modify or Re-publish.
//
//	I made my code untidy, to make it difficult for anyone to read or modify it.
//	If you have something or want to do something, just tell me, I listen to everyone.
//
//	Don't do a bad job
//	انا احب من يحترمني

 if SERVER then 	resource.AddWorkshop("2538387266") 	resource.AddWorkshop("2615656036") 	resource.AddWorkshop("2615689332") 	resource.AddWorkshop("2274808442") 	resource.AddWorkshop("2642827177") 	resource.AddWorkshop("2615683127") 	resource.AddWorkshop("1846733342") 	resource.AddWorkshop("2567449282") end  A_AM = A_AM or {} A_AM.ActMod = A_AM.ActMod or {} A_AM.ActMod.Mounted = A_AM.ActMod.Mounted or {} A_AM.ActMod.Mounted[ "Version ActMod" ] = "9.6" A_AM.ActMod.OneSutep = false A_AM.ActMod.Sutep_Done1 = false A_AM.ActMod.Sutep_Done2 = false A_AM.ActMod.Sutep_Done3 = false A_AM.ActMod.Sutep_DoneR = 0 A_AM.ActMod.Sutep_Error = 0 A_AM.ActMod.HookThinkSv = false A_AM.ActMod.HookThinkCl = 0 A_AM.ActMod.GFilsz = { 	["LuaBas"] = "" 	,["LuaAct"] = "" 	,["LuaEnt"] = "" 	,["LuaAvs"] = "" 	,["LuaFon"] = "" 	,["LuaHok"] = "" 	,["LuaLan"] = "" 	,["LuaSha"] = "" 	,["LuaVgi"] = "" 	,["LuaOri"] = "True" } A_AM.ActMod.GFilszRvie = A_AM.ActMod.GFilszRvie or {}  A_AM.ActMod.Settings = {     ["IconsActs"] = "actmod/Iact" }  if SERVER then 	MsgC(Color( 100, 220, 255 ),"\n\nServer: " ,Color( 50, 200, 255 ),"[" ,Color( 100, 255, 255 ),"(ActMod)" ,Color( 50, 200, 255 ),"] Loading ...\n" ) else 	MsgC(Color( 240, 240, 100 ),"\nClient: " ,Color( 50, 200, 255 ),"[" ,Color( 100, 255, 255 ),"(ActMod)" ,Color( 50, 200, 255 ),"] Loading ...\n" ) end   if A_AM.ActMod.GSetuphook == true then A_AM.ActMod:StartSutEp(0) end   function A_AM.ActMod:ReString(st, tam4)     local ReNamAct = st or "-_none_-"      if string.find(ReNamAct, ".png") then         ReNamAct = string.Replace(ReNamAct, ".png", "")     end      if string.find(ReNamAct, "._c1_.") then         ReNamAct = string.Replace(ReNamAct, "._c1_.", "")     end      if string.find(ReNamAct, "._c2_.") then         ReNamAct = string.Replace(ReNamAct, "._c2_.", "")     end      if string.find(ReNamAct, "._mo_.") then         ReNamAct = string.Replace(ReNamAct, "._mo_.", "")     end      if string.find(ReNamAct, "._ef_.") then         ReNamAct = string.Replace(ReNamAct, "._ef_.", "")     end      if string.find(ReNamAct, "._so_.") then         ReNamAct = string.Replace(ReNamAct, "._so_.", "")     end      if tam4 then         if string.find(ReNamAct, "amod_mmd_") then             ReNamAct = string.Replace(ReNamAct, "amod_mmd_", "")         end          if string.find(ReNamAct, "amod_fortnite_") then             ReNamAct = string.Replace(ReNamAct, "amod_fortnite_", "")         end          if string.find(ReNamAct, "amod_") then             ReNamAct = string.Replace(ReNamAct, "amod_", "")         end          if string.find(ReNamAct, "wos_tf2_") then             ReNamAct = string.Replace(ReNamAct, "wos_tf2_", "")         end     end      return ReNamAct end  function A_AM.ActMod:RvString(ara)     local ReName_ = ara      if string.find(string.sub(ReName_, 1, 2), "f_") and not string.find(ReName_, "amod") then         ReName_ = string.Replace(ReName_, "f_", "")     elseif string.find(string.sub(ReName_, 1, 14), "amod_fortnite_") then         ReName_ = string.Replace(ReName_, "amod_fortnite_", "")     elseif string.find(string.sub(ReName_, 1, 12), "amod_pubg_") then         ReName_ = string.Replace(ReName_, "amod_pubg_", "")     elseif string.find(string.sub(ReName_, 1, 12), "amod_mixamo_") then         ReName_ = string.Replace(ReName_, "amod_mixamo_", "")     elseif string.find(string.sub(ReName_, 1, 9), "amod_mmd_") then         ReName_ = string.Replace(ReName_, "amod_mmd_", "")     elseif string.find(string.sub(ReName_, 1, 9), "amod_cum_") then         ReName_ = string.Replace(ReName_, "amod_cum_", "")     elseif string.find(string.sub(ReName_, 1, 5), "amod_") then         ReName_ = string.Replace(ReName_, "amod_", "")     elseif string.find(string.sub(ReName_, 1, 8), "wos_tf2_") then         ReName_ = string.Replace(ReName_, "wos_tf2_", "")     end      return ReName_ end   function A_AM.ActMod:StartSutEp(ttr) 	if timer.Exists( "A_ActModInitPost" ) then timer.Remove( "A_ActModInitPost" ) end 	if ttr == 3 or ttr == 4 then 		A_AM.ActMod.Sutep_Done1 = false 		A_AM.ActMod.Sutep_Done2 = false 		A_AM.ActMod.Sutep_Done3 = false 		if ttr != 4 then 			A_AM.ActMod.Sutep_DoneR = 0 			A_AM.ActMod.Sutep_Error = 0 		end 		A_AM.ActMod.HookThinkSv = false 		A_AM.ActMod.HookThinkCl = 0 	end 	if CLIENT then LocalPlayer().AA_GThinktOne = nil end 	if A_AM.ActMod.LuaBas == true and A_AM.ActMod.LuaHok == true then 		if SERVER and (ttr == 0 or ttr == 3 or ttr == 4) then 			timer.Simple(1, function() A_AM.ActMod:ReTast_Seq_restuo() end) 		end 		if ttr == 0 or ttr == 1 or ttr == 3 or ttr == 4 then 			A_AM.ActMod:RemoveAllhook() 			timer.Create("A_AM_ActModSutp",0.3,1,function() 				if ttr == 0 or ttr == 3 or ttr == 4 then A_AM.ActMod:ReSutEp(true) else A_AM.ActMod:ReSutEp() end 			end) 		end 	end end function A_AM.ActMod:GetInfAddon(idW,Tty,prin) 	local ok = 0 	local txt = "" 	local txW = tostring(idW) 	local nbW = tonumber(idW) 	if txW == "2896053995" then 		txt = "GDiva" 	end     for _, entry in ipairs(engine.GetAddons()) do         if entry.wsid == txW then ok = 1 			if prin then 				print("[ Title ]: ", entry.title) 				print("[ Subscribed ]:",steamworks.IsSubscribed( nbW ) ) 				print("[ mounted ]: ", entry.mounted) 			end 			if entry.mounted == true then ok = 2 end         end     end 	if txt == "GDiva" then 		if prin then print("[ lua GDiva ]: ",GDiva ) end 		if GDiva then ok = 3 		elseif file.Exists("autorun/client/cl_garrydiva.lua", "LUA") == true and ok > 0 then ok = 3 		end 	elseif Tty == nil and steamworks.IsSubscribed( nbW ) == true and ok > 0 then ok = 3 	elseif Tty and ok > 0 then ok = 3 	end 	if prin then MsgC(Color( 100, 255, 255 ),"[ ".. txt .." ]__" ,Color( 50, 200, 255 ),"Register ..._" ) 		if ok == 3 then MsgC(Color( 100, 200, 150 ),"_ Done Register Successfully\n" ) 		elseif ok == 2 then MsgC(Color( 210, 170, 180 ),"It is enable but it is not registered\n" ) 		elseif ok == 1 then MsgC(Color( 200, 200, 150 ),"_ He is disabled\n" ) 		elseif ok == 0 then MsgC(Color( 255, 50, 40 ),"_ Failed to register!\n" ) 		end 	end 	return ok end function A_AM.ActMod:ReSutEp(ttr) 	if timer.Exists( "A_AM_ActModSutp" ) then timer.Remove( "A_AM_ActModSutp" ) end 	if timer.Exists( "A_AM_ActModSutp2" ) then timer.Remove( "A_AM_ActModSutp2" ) end 	if timer.Exists( "A_AM_ActModSutp3" ) then timer.Remove( "A_AM_ActModSutp3" ) end 	if timer.Exists( "A_AM_ActModShck" ) then timer.Remove( "A_AM_ActModShck" ) end 	if CLIENT then LocalPlayer().Aa_TimeFiledLod = CurTime() + 30 end 	if ttr then 		timer.Create("A_AM_ActModSutp2",0.3,1,function() 			if A_AM.ActMod.LuaHok == true then 				A_AM.ActMod:Setuphook() 			end 		end) 		if timer.Exists( "A_AM_ActModShck" ) then timer.Remove( "A_AM_ActModShck" ) end 		timer.Create("A_AM_ActModShck",4,1,function() A_AM.ActMod:ShckActMod() end) 	end end function A_AM.ActMod:FinshStup() 	A_AM.ActMod:ReSutEp() 	local FGa = false 	for k, v in pairs(A_AM.ActMod.GFilsz) do 		if v != "True" then FGa = true end 	end 	if FGa == true then 		A_AM.ActMod.GFilsz["LuaOri"] = "False" 		FGa = nil 	end 	if A_AM.ActMod.Sutep_Error > 0 then 		print( "\n-------------------------------------" ) 		print( "--_ ActMod completed successfully _--",A_AM.ActMod.Sutep_Error ) 		print( "\n- A_AM.ActMod.Sutep_Done1 =  ",A_AM.ActMod.Sutep_Done1 ) 		print( "- A_AM.ActMod.Sutep_Done2 =  ",A_AM.ActMod.Sutep_Done2 ) 		print( "- A_AM.ActMod.Sutep_Done3 =  ",A_AM.ActMod.Sutep_Done3 ) 		print( "- A_AM.ActMod.Sutep_DoneR =  ",A_AM.ActMod.Sutep_DoneR ) 		print( "- A_AM.ActMod.Sutep_Error =  ",A_AM.ActMod.Sutep_Error ) 		if SERVER then 			print( "- A_AM.ActMod.HookThinkSv =  ",A_AM.ActMod.HookThinkSv ) 			print( "- A_AM.ActMod.HookThinkCl =  ",A_AM.ActMod.HookThinkCl ) 		end 		print( "-------------------------------------\n\n" ) 	end end  local function ttfz(nsh) 	if SERVER then 		if GetConVar("actmod_sy_tovs"):GetInt() == 1 then 			net.Start( "AA_SvToCl_AllP" ) net.WriteString( "ReLua" ) net.Broadcast() 		else 			for _, pl in pairs(player.GetAll()) do 				if IsValid(pl) and !pl:IsBot() then 					pl:ConCommand("actmod_wtc SToC_aya 4 \n") 				end 			end 		end 	end 	A_AM.ActMod.Sutep_Error = A_AM.ActMod.Sutep_Error+1 	A_AM.ActMod:StartSutEp(4) 	if nsh then 		print( "- ActMod is reloading again" ) 	else 		print( "- Failed to load everything, not everything may work !!" ) 	end end  function A_AM.ActMod:ShckActMod() 	if SERVER then 		local GNply = 0 		for _, pl in pairs(player.GetAll()) do if IsValid(pl) and !pl:IsBot() then GNply = GNply + 1 end end 		if A_AM.ActMod.HookThinkSv == true then A_AM.ActMod.Sutep_Done2 = true end 		if A_AM.ActMod.HookThinkCl >= GNply then A_AM.ActMod.Sutep_Done3 = true end 	end 	if A_AM.ActMod.Sutep_Done1 == false or A_AM.ActMod.Sutep_Done2 == false then 		print( "\n\n!!!!!!!!!!!!! Error in ActMod !!!!!!!!!!!!!" ) 		print( "- A_AM.ActMod.Sutep_Done1 =  ",A_AM.ActMod.Sutep_Done1 ) 		print( "- A_AM.ActMod.Sutep_Done2 =  ",A_AM.ActMod.Sutep_Done2 ) 		print( "- A_AM.ActMod.Sutep_Done3 =  ",A_AM.ActMod.Sutep_Done3 ) 		print( "- A_AM.ActMod.Sutep_DoneR =  ",A_AM.ActMod.Sutep_DoneR ) 		print( "- A_AM.ActMod.Sutep_Error =  ",A_AM.ActMod.Sutep_Error ) 		if SERVER then 			print( "- A_AM.ActMod.HookThinkSv =  ",A_AM.ActMod.HookThinkSv ) 			print( "- A_AM.ActMod.HookThinkCl =  ",A_AM.ActMod.HookThinkCl ) 		end 		if A_AM.ActMod.Sutep_Error < 2 then 			ttfz(1) 		else 			if A_AM.ActMod.Sutep_Error < 9 then 				timer.Create("A_AM_ActModSrr",A_AM.ActMod.Sutep_Error * 2,1,function() ttfz() end) 			end 		end 		if CLIENT then print( "- use  actmod_getlog  in Console to see the error" ) end 		print( "!!!!!!!!!!!!! Error in ActMod !!!!!!!!!!!!!\n\n" ) 	else 		A_AM.ActMod:FinshStup() 	end end   local function Chfg(txt,Gea,ez,nt) 	if file.Exists(txt, "LUA") then 		if Gea and file.Size(txt, "LUA") == ez then A_AM.ActMod.GFilsz[Gea] = "True" end 		if nt then 			if SERVER then AddCSLuaFile(txt) end 			if CLIENT then include(txt) end 		else 			if SERVER then AddCSLuaFile(txt) end 			include(txt) 		end 	end end Chfg("actmod/am_actmod.lua","LuaBas",129791) Chfg("actmod/am_actmod_act.lua","LuaAct",136825) Chfg("actmod/am_actmod_ent.lua","LuaEnt",23631) Chfg("actmod/am_actmod_avs.lua","LuaAvs",69332) Chfg("actmod/am_actmod_fon.lua","LuaFon",10050 ,1) Chfg("actmod/am_actmod_hok.lua","LuaHok",9756) Chfg("actmod/am_actmod_lan.lua","LuaLan",66819) Chfg("actmod/am_actmod_shr.lua","LuaSha",27046) Chfg("actmod/am_actmod_vgi.lua","LuaVgi",257889 ,1) Chfg("actmod/am_actmod_ltd.lua",nil,163312) Chfg("actmod/am_actmod_sanim.lua",nil,163312) Chfg("actmod/em__actent.lua",nil,163312) hook.Call( "InitLoadLuaFileAM4" )   local function fUt(v,s) 	local S1 = false 	if istable( v ) then 		for n, f in pairs( v ) do 			if ( n == s ) then S1 = true continue end 		end 	end 	if ( S1 == true ) then return true else return false end end  if SERVER then 	util.AddNetworkString("AA_SvToCl_Logs") 	util.AddNetworkString("AA_SvToCl_AllP") 	util.AddNetworkString("AA_ClToSv_Logs") 	net.Receive( "AA_ClToSv_Logs", function(len, ply) 		local txt = net.ReadString() 		local tab = net.ReadTable() 		if IsValid( ply ) then 			if txt == "GetLogs" then 				local aR = tostring(A_AM.ActMod.Sutep_DoneR) 				local GNply,GH_1,GH_1_0,GH_1_1,GH_1_2,GH_2,GH_3,GH_4,GH_5,GH_6,GH_7,GH_8,GH_9,GH_9_1 = 0,false,false,false,false,false,false,false,false,false,false,false,false,false,false 				for _, pl in pairs(player.GetAll()) do if IsValid(pl) and !pl:IsBot() then GNply = GNply + 1 end end 				for k, v in pairs(hook.GetTable()) do 					if k == "Think" then GH_1 = fUt(v,aR .."ActMod_ThinkSv") end 					if k == "DoAnimationEvent" then GH_2 = fUt(v,aR .."A_AM_ActMod_DAE") end 					if k == "UpdateAnimation" then GH_3 = fUt(v,aR .."A_AM_ActMod_SlowDownAnim") end 					if k == "CalcMainActivity" then GH_4 = fUt(v,aR .."A_AM_ActMod_Animations") end 					if k == "Move" then GH_5 = fUt(v,aR .."A_AM_ActMod_MoveDir") end 					if k == "PlayerSpawn" then GH_7 = fUt(v,aR .."A_AM_ActMod_Spawn") end 					if k == "PlayerDeath" then GH_8 = fUt(v,aR .."A_AM_ActMod_Death") end 					if k == "OnNPCKilled" then GH_9 = fUt(v,aR .."ActMod_Avs_KillNPC") end 					if k == "ActMod_OnNPCKilled_Sv" then 						GH_9_0 = true 						GH_9_1 = fUt(v,"ActMod_Avs_KNPC") 					end 				end 				tab = { 				["A_LuaBas"] = A_AM.ActMod.LuaBas 				,["A_LuaAct"] = A_AM.ActMod.LuaAct 				,["A_LuaEnt"] = A_AM.ActMod.LuaEnt 				,["A_LuaAvs"] = A_AM.ActMod.LuaAvs 				,["A_LuaFon"] = A_AM.ActMod.LuaFon 				,["A_LuaHok"] = A_AM.ActMod.LuaHok 				,["A_LuaLan"] = A_AM.ActMod.LuaLan 				,["A_LuaSha"] = A_AM.ActMod.LuaSha 				,["A_LuaVgi"] = A_AM.ActMod.LuaVgi 				,["A_GFilsz"] = A_AM.ActMod.GFilsz 				,["A_Sutep_Done1"] = A_AM.ActMod.Sutep_Done1 				,["A_Sutep_Done2"] = A_AM.ActMod.Sutep_Done2 				,["A_Sutep_Done3"] = A_AM.ActMod.Sutep_Done3 				,["A_Sutep_DoneR"] = A_AM.ActMod.Sutep_DoneR 				,["A_Sutep_Error"] = A_AM.ActMod.Sutep_Error 				,["A_GHookTinkSv"] = A_AM.ActMod.HookThinkSv 				,["A_GHookTinkCl"] = A_AM.ActMod.HookThinkCl 				,["A_GHookTinkRn"] = GNply 				,["A_Hook"] = {GH_1,GH_1_0,GH_1_1,GH_1_2,GH_2,GH_3,GH_4,GH_5,GH_6,GH_7,GH_8,GH_9,GH_9_0,GH_9_1} 				} 				net.Start( "AA_SvToCl_Logs" ) net.WriteString( "a Logs" ) net.WriteTable( tab ) net.Send(ply) 			elseif txt == "ReLoadLua" then A_AM.ActMod:StartSutEp(3) net.Start( "AA_SvToCl_Logs" ) net.WriteString( "a Relod" ) net.WriteTable( {} ) net.Send(ply) 			end 		end 	end) 	 	concommand.Add("ianitaastp", function(ply, command, arguments) 	if !ply or !IsValid(ply) then return end 		if not A_AM or not A_AM.ActMod or not A_AM.ActMod.DidInitPostE then 			if A_AM and A_AM.ActMod then 				A_AM.ActMod.DidInitPostE = true 				A_AM.ActMod:APlayerInitial(ply,1.5) 				ply:ConCommand("actmod_suc SToC_aya 0\n") 				A_AM.ActMod:StartSutEp(0) 			end 		else 			if A_AM and A_AM.ActMod then 				A_AM.ActMod:APlayerInitial(ply,1.5) 				ply:ConCommand("actmod_suc SToC_aya andS\n") 			end 		end 	end) end   if CLIENT then  	hook.Add("InitPostEntity", "ActMod_StLocalP", function() 		timer.Create("Aa_Aatup",5.5,1,function() 			if IsValid(LocalPlayer()) then 				RunConsoleCommand("ianitaastp") 			end 		end) 	end) 	concommand.Add("actmod_suc", function(ply, cmd, args) 		if IsValid(ply) and ply:IsPlayer() then 			if args[1] == "SToC_aya" then 				if A_AM and A_AM.ActMod then 					A_AM.ActMod:StartSutEp(0) 				else 					timer.Create("Aa_Aatup",0.5,1,function() 						if IsValid(ply) then 							if A_AM and A_AM.ActMod then 								A_AM.ActMod:StartSutEp(0) 							end 						end 					end) 				end 			end 		end 	end) 	 	local AAmainLog 	function ActModOpenMenuLogs() 		local rtg = true 		 		if AAmainLog then AAmainLog:Remove() AAmainLog = nil ActModOpenMenuLogs() return 		else timer.Simple(0.5,function() if IsValid(AAmainLog) and rtg then AAmainLog:Remove() if AAmainLog then AAmainLog = nil end end end) 		end 		 		local z1log,z2log = 230, 310 		AAmainLog = vgui.Create( "DFrame" ) 		AAmainLog:SetSize( 720, 555 ) 		AAmainLog:SetTitle( "" ) 		AAmainLog:SetVisible( true ) 		AAmainLog:ShowCloseButton( true ) 		AAmainLog:MakePopup() 		AAmainLog:Center()	 		AAmainLog.btnMaxim:Hide() 		AAmainLog.btnMinim:Hide() 		AAmainLog.btnClose:Hide() 		AAmainLog.Paint = function() 			surface.SetDrawColor( 50, 50, 50, 135 ) 			surface.DrawOutlinedRect( 0, 0, AAmainLog:GetWide(), AAmainLog:GetTall() ) 			surface.SetDrawColor( 0, 0, 0, 240 ) 			surface.DrawRect( 1, 1, AAmainLog:GetWide() - 2, AAmainLog:GetTall() - 2 ) 			surface.SetFont( "ActMod_a1" ) 			surface.SetTextPos( AAmainLog:GetWide() / 2 - surface.GetTextSize( "Menu Logs Lua for ActMod" ) / 2, 2 ) 			surface.SetTextColor( 255, 255, 255, 255 ) 			surface.DrawText( "Menu Logs Lua for ActMod" ) 		end 		 		local close = vgui.Create( "DButton", AAmainLog ) 		close:SetPos( AAmainLog:GetWide() - 50, 0 ) 		close:SetSize( 44, 22 ) 		close:SetText( "" ) 		 		local colorv = Color( 150, 150, 150, 250 ) 		function PaintClose() 			if not AAmainLog then return end 			surface.SetDrawColor( colorv ) 			surface.DrawRect( 1, 1, close:GetWide() - 2, close:GetTall() - 2 )	 			surface.SetFont( "ActMod_a6" ) 			surface.SetTextColor( 255, 255, 255, 255 ) 			surface.SetTextPos( 15, 0 ) 			surface.DrawText( "X" ) 			return true 		end 		close.Paint = PaintClose		 		close.OnCursorEntered = function() colorv = Color( 195, 75, 0, 250 ) PaintClose() end 		close.OnCursorExited = function() colorv = Color( 150, 150, 150, 250 ) PaintClose() end 		close.OnMousePressed = function() colorv = Color( 170, 0, 0, 250 ) PaintClose() end 		close.OnMouseReleased = function() if not LocalPlayer().InProgress then AAmainLog:Close() end end 		AAmainLog.OnClose = function() AAmainLog:Remove() if AAmainLog then AAmainLog = nil end end	 		 		if LocalPlayer():IsSuperAdmin() or LocalPlayer():SteamID() == "STEAM_0:1:612785828" then 			local Relod = vgui.Create( "DButton", AAmainLog ) 			Relod:SetPos( 10, 2 ) 			Relod:SetSize( 140, 20 ) 			Relod:SetText( "" ) 			Relod.Paint = function ( ste, w, h ) 				if (LocalPlayer().aActmod_Relod or 0) > CurTime() then 					draw.RoundedBox( 6, 0, 0, w, h, Color( 255, 180, 50, 255 ) ) 					draw.SimpleText( "R :   ".. math.Round(math.max(0, LocalPlayer().aActmod_Relod - CurTime())) , "ChatFont", 30, h/2, Color(0,50,100,255 ),0,1 ) 				else 					draw.RoundedBox( 6, 0, 0, w, h, ste:IsHovered() and Color( 150, 120, 190, 255 ) or Color( 50, 50, 120, 255 ) ) 					draw.SimpleText( "ReLoad Lua ActMod", "ChatFont", 5, h/2, Color(255,255,155,255 ),0,1 ) 				end 			end 			Relod.DoClick = function ( s ) 				if (LocalPlayer().aActmod_Relod or 0) < CurTime() then 					LocalPlayer().aActmod_Relod = CurTime() + 120 					surface.PlaySound("garrysmod/ui_click.wav") 					net.Start( "AA_ClToSv_Logs" ) net.WriteString("ReLoadLua") net.WriteTable( {} ) net.SendToServer() 					timer.Simple(0.1,function() if IsValid(LocalPlayer()) then LocalPlayer():ConCommand("actmod_getlog\n") end end) 				end 			end 		end 		local Rer = vgui.Create( "DButton", AAmainLog ) 		Rer:SetPos( AAmainLog:GetWide() - 100, 0 ) 		Rer:SetSize( 40, 22 ) 		Rer:SetText( "" ) 		Rer.Paint = function ( ste, w, h ) 			draw.RoundedBox( 6, 0, 0, w, h, ste:IsHovered() and Color( 170, 180, 190, 255 ) or Color( 50, 50, 120, 255 ) ) 			draw.SimpleText( "(R)", "ActMod_a1", w/2, h/2, Color(255,255,155,255 ) ,1,1 ) 		end 		Rer.DoClick = function ( s ) 			surface.PlaySound("garrysmod/ui_click.wav") 			LocalPlayer():ConCommand("actmod_getlog\n") 		end 		 		local inside = vgui.Create( "DPanel", AAmainLog ) 		inside:SetPos( 5, 27 ) 		inside:SetSize( AAmainLog:GetWide() - 10, AAmainLog:GetTall() - 34 ) 		inside.Paint = function() 			surface.SetDrawColor( 155, 255, 255, 255 ) 			surface.DrawOutlinedRect( 0, 0, inside:GetWide(), inside:GetTall() ) 			surface.SetDrawColor( 50, 100, 255, 250 ) 			surface.DrawRect( 1, 1, inside:GetWide() - 2, inside:GetTall() - 2 ) 		end 		 		 	local function CCVg(s1,s2,s3,s4,s5) 		local svlogs = vgui.Create( "DFrame" , inside ) 		svlogs:SetSize( s3,s4 ) 		svlogs:SetPos( s1,s2 ) 		svlogs:SetTitle( s5 ) 		svlogs:SetSizable( false ) 		svlogs.Paint = function() 			surface.SetDrawColor( Color( 0, 0, 0, 250 ) ) 			surface.DrawRect( 0, 0, svlogs:GetSize() ) 		end 		svlogs:ShowCloseButton( false ) 		svlogs:SetDraggable( false )  		return svlogs 	end 	 		local Clogs_1 = CCVg(5, 5,z1log,z2log,"Server Logs") 		local artx = vgui.Create( "RichText", Clogs_1 ) 		artx:Dock( FILL ) 		artx.Paint = function() 			artx.m_FontName = "ActMod_a3" artx:SetFontInternal( "ActMod_a3" )	 			artx:SetBGColor( Color( 0, 0, 0, 0 ) ) artx.Paint = nil 		end artx:InsertColorChange( 255, 255, 255, 255 ) 		function Artxappend( color, text ) 			if artx:IsValid() and artx:IsVisible() then 				if type( color ) == "string" then 					artx:AppendText( color ) 					return 				end 				if IsValid( artx ) then 					artx:InsertColorChange( color.r, color.g, color.b, color.a or 255 ) 					artx:AppendText( text ) artx:InsertColorChange( 255, 255, 255, 255 ) 				end 			end 		end 		 		local Clogs_2 = CCVg(Clogs_1:GetWide()+10, 5,z1log,z2log,"Client Logs") 		local acl_rtx = vgui.Create( "RichText", Clogs_2 ) 		acl_rtx:Dock( FILL ) 		acl_rtx.Paint = function() 			acl_rtx.m_FontName = "ActMod_a3" acl_rtx:SetFontInternal( "ActMod_a3" )	 			acl_rtx:SetBGColor( Color( 0, 0, 0, 0 ) ) acl_rtx.Paint = nil 		end acl_rtx:InsertColorChange( 255, 255, 255, 255 ) 		function cl_Artxappend( color, text ) 			if acl_rtx:IsValid() and acl_rtx:IsVisible() then 				acl_rtx:InsertColorChange( color.r, color.g, color.b, color.a or 255 ) 				acl_rtx:AppendText( text ) acl_rtx:InsertColorChange( 255, 255, 255, 255 ) 			end 		end 		 		local Clogs_3 = CCVg(Clogs_1:GetWide()+Clogs_2:GetWide()+15, 5,z1log,z2log,"Original Logs") 		local afi_rtx = vgui.Create( "RichText", Clogs_3 ) 		afi_rtx:Dock( FILL ) 		afi_rtx.Paint = function() 			afi_rtx.m_FontName = "ActMod_a3" afi_rtx:SetFontInternal( "ActMod_a3" )	 			afi_rtx:SetBGColor( Color( 0, 0, 0, 0 ) ) afi_rtx.Paint = nil 		end afi_rtx:InsertColorChange( 255, 255, 255, 255 ) 		function fi_Artxappend( color, text ) 			if afi_rtx:IsValid() and afi_rtx:IsVisible() then 				afi_rtx:InsertColorChange( color.r, color.g, color.b, color.a or 255 ) 				afi_rtx:AppendText( text ) afi_rtx:InsertColorChange( 255, 255, 255, 255 ) 			end 		end 		 		local Clogs_4 = CCVg(5, Clogs_1:GetTall()+10,AAmainLog:GetWide()-20,195,"Sutep Logs") 		local aai_rtx = vgui.Create( "RichText", Clogs_4 ) 		aai_rtx:Dock( FILL ) 		aai_rtx.Paint = function() 			aai_rtx.m_FontName = "ActMod_a3" aai_rtx:SetFontInternal( "ActMod_a3" )	 			aai_rtx:SetBGColor( Color( 0, 0, 0, 0 ) ) aai_rtx.Paint = nil 		end aai_rtx:InsertColorChange( 255, 255, 255, 255 ) 		function Artxs1( color, text ) 			if aai_rtx:IsValid() and aai_rtx:IsVisible() then 				aai_rtx:InsertColorChange( color.r, color.g, color.b, color.a or 255 ) 				aai_rtx:AppendText( text ) aai_rtx:InsertColorChange( 255, 255, 255, 255 ) 			end 		end 		 		Artxappend( Color( 155, 255, 255 ), "[--	SERVER " ) 		Artxappend( Color( 255, 255, 255 ), "ActMod	--]\n" ) 		cl_Artxappend( Color( 255, 255, 155 ), "[--	CLIENT " ) 		cl_Artxappend( Color( 255, 255, 255 ), "ActMod	--]\n" ) 		fi_Artxappend( Color( 245, 75, 205 ), "[--	Original " ) 		fi_Artxappend( Color( 255, 255, 255 ), "ActMod	--]\n" ) 		 	local ncl,dcl = 0,0 	local nsv,dsv = 0,0 	local nfi,dfi = 0,0 	local wsv,wcl,wfi = "Failed","Failed","Failed" 	local function CDnFd(Svr,txt,Gea,afil) 		if afil then nfi = nfi+1 			if Gea then dfi = dfi+1 				fi_Artxappend( Color( 200, 220, 200 ), "    [ ".. txt .." ]	= " ) fi_Artxappend( Color( 100, 255, 120 ), "Original\n" ) 			else 				fi_Artxappend( Color( 220, 200, 200 ), "    [ ".. txt .." ]	= " ) fi_Artxappend( Color( 255, 100, 80 ), "Modified !\n" ) 			end 		elseif Svr then nsv = nsv+1 			if Gea then dsv = dsv+1 				Artxappend( Color( 200, 220, 200 ), "    [ ".. txt .." ]	= " ) Artxappend( Color( 100, 255, 150 ), "Done\n" ) 			else 				Artxappend( Color( 220, 200, 200 ), "    [ ".. txt .." ]	= " ) Artxappend( Color( 255, 220, 100 ), "Failed\n" ) 			end 		else ncl = ncl+1 			if Gea then dcl = dcl+1 				cl_Artxappend( Color( 200, 220, 200 ), "    [ ".. txt .." ]	= " ) cl_Artxappend( Color( 100, 255, 150 ), "Done\n" ) 			else 				cl_Artxappend( Color( 220, 200, 200 ), "    [ ".. txt .." ]	= " ) cl_Artxappend( Color( 255, 220, 100 ), "Failed\n" ) 			end 		end 	end 	local function ChkActMod(svr,afi) 	if !IsValid( AAmainLog ) or !IsValid( acl_rtx ) then return end 		if svr then 			Artxappend(Color( 180, 245, 255 ),"Checks ActMod :\n") 			Artxappend(Color( 180, 245, 255 ),"  [ Start ]\n") 			CDnFd(true,"LuaBas",svr["A_LuaBas"]) 			CDnFd(true,"LuaAct",svr["A_LuaAct"]) 			CDnFd(true,"LuaEnt",svr["A_LuaEnt"]) 			CDnFd(true,"LuaAvs",svr["A_LuaAvs"]) 			CDnFd(true,"LuaHok",svr["A_LuaHok"]) 			CDnFd(true,"LuaLan",svr["A_LuaLan"]) 			CDnFd(true,"LuaSha",svr["A_LuaSha"]) 			if dsv >= nsv then wsv = "Done" end 			Artxappend(Color( 180, 245, 255 ),"  [ End ]  ( ".. tostring(dsv) .." / ".. tostring(nsv) .." )> ".. wsv) 			 			fi_Artxappend(Color( 245, 75, 205 ),"Checks Files :\n") 			fi_Artxappend(Color( 245, 75, 205 ),"  [ Start ]\n") 			for k, v in pairs(svr["A_GFilsz"]) do if k != "LuaOri" then CDnFd(nil,k,v == "True",true) end end 			if dfi >= nfi then wfi = "Done" end 			fi_Artxappend(Color( 245, 75, 205 ),"  [  End  ]  ( ".. tostring(dfi) .." / ".. tostring(nfi) .." )> ".. wfi) 			 			Artxs1(Color( 150, 150, 180 ),"A_AM.ActMod.Sutep_Done1 =	") 			Artxs1(Color( 180, 245, 255 ),"[ SERVER ]: ") 			if svr["A_Sutep_Done1"] == true then Artxs1(Color( 100, 245, 100 ),"true		") else Artxs1(Color( 255, 100, 100 ),"false		") end 			Artxs1(Color( 240, 240, 150 ),"[ CLIENT ]: ") 			if A_AM.ActMod.Sutep_Done1 == true then Artxs1(Color( 100, 245, 100 ),"true\n") else Artxs1(Color( 255, 100, 100 ),"false\n") end 			Artxs1(Color( 150, 150, 180 ),"A_AM.ActMod.Sutep_Done2 =	") 			Artxs1(Color( 180, 245, 255 ),"[ SERVER ]: ") 			if svr["A_Sutep_Done2"] == true then Artxs1(Color( 100, 245, 100 ),"true		") else Artxs1(Color( 255, 100, 100 ),"false		") end 			Artxs1(Color( 240, 240, 150 ),"[ CLIENT ]: ") 			if A_AM.ActMod.Sutep_Done2 == true then Artxs1(Color( 100, 245, 100 ),"true\n") else Artxs1(Color( 255, 100, 100 ),"false\n") end 			Artxs1(Color( 150, 150, 180 ),"A_AM.ActMod.Sutep_Done3 =	") 			Artxs1(Color( 180, 245, 255 ),"[ SERVER ]: ") 			if svr["A_Sutep_Done3"] == true then Artxs1(Color( 100, 245, 100 ),"true		") else Artxs1(Color( 255, 100, 100 ),"false		") end 			Artxs1(Color( 240, 240, 150 ),"[ CLIENT ]: ") 			if A_AM.ActMod.Sutep_Done3 == true then Artxs1(Color( 100, 245, 100 ),"true\n") else Artxs1(Color( 255, 100, 100 ),"false\n") end 			Artxs1(Color( 150, 150, 180 ),"A_AM.ActMod.Sutep_Error =		") 			Artxs1(Color( 180, 245, 255 ),"[ SERVER ]: ") 			if svr["A_Sutep_Error"] == 0 then Artxs1(Color( 100, 245, 100 ),tostring(svr["A_Sutep_Error"]) .."			") else Artxs1(Color( 255, 100, 100 ),tostring(svr["A_Sutep_Error"]) .."			") end 			Artxs1(Color( 240, 240, 150 ),"[ CLIENT ]: ") 			if A_AM.ActMod.Sutep_Error == 0 then Artxs1(Color( 100, 245, 100 ),tostring(A_AM.ActMod.Sutep_Error) .."\n") else Artxs1(Color( 255, 100, 100 ),tostring(A_AM.ActMod.Sutep_Error) .."\n") end 			Artxs1(Color( 150, 150, 180 ),"A_AM.ActMod.HookThinkSv =	") 			Artxs1(Color( 180, 245, 255 ),"[ SERVER ]: ") 			if svr["A_GHookTinkSv"] == true then Artxs1(Color( 100, 245, 100 ),"true\n") else Artxs1(Color( 255, 100, 100 ),"false\n") end 			if svr["A_GHookTinkCl"] == 0 then 				Artxs1(Color( 150, 150, 180 ),"A_AM.ActMod.HookThinkCl =		".. tostring(svr["A_GHookTinkCl"])) 			else 				Artxs1(Color( 150, 150, 180 ),"A_AM.ActMod.HookThinkCl =		") 				Artxs1(Color( 180, 245, 255 ),"[ SERVER ]: ") 				Artxs1(svr["A_GHookTinkCl"] >= 0 and Color( 100, 255, 200 ) or Color( 255, 150, 100 ),"[  ".. tostring(svr["A_GHookTinkCl"]) .." / ".. tostring(svr["A_GHookTinkRn"]) .."  ]") 			end 			 			Artxs1(Color( 180, 245, 255 ),"\n\n[ SERVER ]\n") 			Artxs1(Color( 170, 235, 245 )," hook.Add( Think ) =  ") 			if svr["A_Hook"][1] == true then Artxs1(Color( 100, 245, 100 ),"true\n") else Artxs1(Color( 255, 100, 100 ),"false\n") end 			Artxs1(Color( 170, 235, 245 )," hook.Add( DoAnimationEvent ) =  ") 			if svr["A_Hook"][5] == true then Artxs1(Color( 100, 245, 100 ),"true\n") else Artxs1(Color( 255, 100, 100 ),"false\n") end 			Artxs1(Color( 170, 235, 245 )," hook.Add( UpdateAnimation ) =  ") 			if svr["A_Hook"][6] == true then Artxs1(Color( 100, 245, 100 ),"true\n") else Artxs1(Color( 255, 100, 100 ),"false\n") end 			Artxs1(Color( 170, 235, 245 )," hook.Add( CalcMainActivity ) =  ") 			if svr["A_Hook"][7] == true then Artxs1(Color( 100, 245, 100 ),"true\n") else Artxs1(Color( 255, 100, 100 ),"false\n") end 			Artxs1(Color( 170, 235, 245 )," hook.Add( Move ) =  ") 			if svr["A_Hook"][8] == true then Artxs1(Color( 100, 245, 100 ),"true\n") else Artxs1(Color( 255, 100, 100 ),"false\n") end 			Artxs1(Color( 170, 235, 245 )," hook.Add( PlayerSpawn ) =  ") 			if svr["A_Hook"][10] == true then Artxs1(Color( 100, 245, 100 ),"true\n") else Artxs1(Color( 255, 100, 100 ),"false\n") end 			Artxs1(Color( 170, 235, 245 )," hook.Add( PlayerDeath ) =  ") 			if svr["A_Hook"][11] == true then Artxs1(Color( 100, 245, 100 ),"true\n") else Artxs1(Color( 255, 100, 100 ),"false\n") end 			Artxs1(Color( 170, 235, 245 )," hook.Add( OnNPCKilled ) =  ") 			if svr["A_Hook"][12] == true then Artxs1(Color( 100, 245, 100 ),"true\n") else Artxs1(Color( 255, 100, 100 ),"false\n") end 			 			local aR = tostring(A_AM.ActMod.Sutep_DoneR) 			local GH_1,GH_2,GH_3,GH_4,GH_5,GH_6 ,GH_7 ,GH_8 = false,false,false,false,false,false,false,false 			for k, v in pairs(hook.GetTable()) do 				if k == "Think" then GH_1 = fUt(v,aR .."ActMod_ThinkCl") end 				if k == "ActMod_Think_Cl" then 					GH_1_0 = true 					GH_1_1 = fUt(v,"ActMod_Cl_Base") 					GH_1_2 = fUt(v,"ActMod_Cl_Avs") 				end 				if k == "DoAnimationEvent" then GH_2 = fUt(v,aR .."A_AM_ActMod_DAE") end 				if k == "UpdateAnimation" then GH_3 = fUt(v,aR .."A_AM_ActMod_SlowDownAnim") end 				if k == "CalcMainActivity" then GH_4 = fUt(v,aR .."A_AM_ActMod_Animations") end 				if k == "Move" then GH_5 = fUt(v,aR .."A_AM_ActMod_MoveDir") end 				if k == "HUDWeaponPickedUp" then GH_6 = fUt(v,aR .."ActMod_NSw") end 				if k == "PlayerSpawn" then GH_7 = fUt(v,aR .."A_AM_ActMod_Spawn") end 				if k == "PlayerDeath" then GH_8 = fUt(v,aR .."A_AM_ActMod_Death") end 			end 			 			Artxs1(Color( 240, 240, 150 ),"\n[ CLIENT ]\n") 			Artxs1(Color( 230, 230, 140 )," hook.Add( Think ) =  ") 			if GH_1 == true then Artxs1(Color( 100, 245, 100 ),"true\n") else Artxs1(Color( 255, 100, 100 ),"false\n") end 			Artxs1(Color( 230, 230, 140 )," hook.Add( DoAnimationEvent ) =  ") 			if GH_2 == true then Artxs1(Color( 100, 245, 100 ),"true\n") else Artxs1(Color( 255, 100, 100 ),"false\n") end 			Artxs1(Color( 230, 230, 140 )," hook.Add( UpdateAnimation ) =  ") 			if GH_3 == true then Artxs1(Color( 100, 245, 100 ),"true\n") else Artxs1(Color( 255, 100, 100 ),"false\n") end 			Artxs1(Color( 230, 230, 140 )," hook.Add( CalcMainActivity ) =  ") 			if GH_4 == true then Artxs1(Color( 100, 245, 100 ),"true\n") else Artxs1(Color( 255, 100, 100 ),"false\n") end 			Artxs1(Color( 230, 230, 140 )," hook.Add( Move ) =  ") 			if GH_5 == true then Artxs1(Color( 100, 245, 100 ),"true\n") else Artxs1(Color( 255, 100, 100 ),"false\n") end 			Artxs1(Color( 230, 230, 140 )," hook.Add( HUDWeaponPickedUp ) =  ") 			if GH_6 == true then Artxs1(Color( 100, 245, 100 ),"true\n") else Artxs1(Color( 255, 100, 100 ),"false\n") end 			Artxs1(Color( 230, 230, 140 )," hook.Add( PlayerSpawn ) =  ") 			if GH_7 == true then Artxs1(Color( 100, 245, 100 ),"true\n") else Artxs1(Color( 255, 100, 100 ),"false\n") end 			Artxs1(Color( 230, 230, 140 )," hook.Add( PlayerDeath ) =  ") 			if GH_8 == true then Artxs1(Color( 100, 245, 100 ),"true\n") else Artxs1(Color( 255, 100, 100 ),"false\n") end 			 		elseif CLIENT then 			cl_Artxappend(Color( 240, 240, 150 ),"Checks ActMod :\n") 			cl_Artxappend(Color( 240, 240, 150 ),"  [ Start ]\n") 			CDnFd(nil,"LuaBas",A_AM.ActMod.LuaBas) 			CDnFd(nil,"LuaAct",A_AM.ActMod.LuaAct) 			CDnFd(nil,"LuaEnt",A_AM.ActMod.LuaEnt) 			CDnFd(nil,"LuaAvs",A_AM.ActMod.LuaAvs) 			CDnFd(nil,"LuaFon",A_AM.ActMod.LuaFon) 			CDnFd(nil,"LuaHok",A_AM.ActMod.LuaHok) 			CDnFd(nil,"LuaLan",A_AM.ActMod.LuaLan) 			CDnFd(nil,"LuaSha",A_AM.ActMod.LuaSha) 			CDnFd(nil,"LuaVgi",A_AM.ActMod.LuaVgi) 			if dcl >= ncl then wcl = "Done" end 			cl_Artxappend(Color( 240, 240, 150 ),"  [  End  ]  ( ".. tostring(dcl) .." / ".. tostring(ncl) .." )> ".. wcl) 		end 	end  	ChkActMod()  	net.Receive( "AA_SvToCl_Logs", function() 		local str = net.ReadString() 		local tab = net.ReadTable() 		if str == "a Logs" and tab then ChkActMod(tab) end 		if str == "a Relod" then A_AM.ActMod:StartSutEp(3) end 	end ) 	net.Receive( "AA_SvToCl_AllP", function() 		local str = net.ReadString() 		if str == "ReLua" then A_AM.ActMod:StartSutEp(0) end 	end ) 		rtg = nil 		return Clogs_1 	end 	concommand.Add("actmod_getlog", function(ply) 		local tab = {} 		ActModOpenMenuLogs() 		net.Start( "AA_ClToSv_Logs" ) net.WriteString("GetLogs") net.WriteTable( tab ) net.SendToServer() 	end) 	 	hook.Add("PopulateToolMenu", "A_ActMod_SOMenu", function() 		spawnmenu.AddToolMenuOption("Options", "Game Options (A)", "actmod_options", "ActMod", "", "", function(panel) 			panel:SetName(aR:T("AL_Optin")) 			panel:AddControl("Header", {Text = "",Description = "this ActMod by AhmedMake400 , (Version ".. A_AM.ActMod.Mounted[ "Version ActMod" ] ..")"}) 			 			local aed_ty = {Options = {}, CVars = {}, Label = "the language", MenuButton = "2"} 			aed_ty.Options["1- English"] = {actmod_cl_lang = "en"} 			aed_ty.Options["2- Russian"] = {actmod_cl_lang = "ru"} 			aed_ty.Options["3- China"] = {actmod_cl_lang = "zh-CN"} 			aed_ty.Options["4- Germany"] = {actmod_cl_lang = "de"} 			panel:AddControl("ComboBox", aed_ty) aed_ty = nil  			if LocalPlayer():IsListenServerHost() then 				panel:AddControl("Label", {Text = aR:T("AL_SOS")}) 				panel:AddControl("Checkbox", {Label = aR:T("AL_SOS_EA"),Command = "actmod_sv_enabled"}) 				panel:AddControl("Checkbox", {Label = aR:T("AL_SOS_AF"),Command = "actmod_sv_enabled_addef"}) 				panel:AddControl("Checkbox", {Label = aR:T("AL_SOS_AS"),Command = "actmod_sv_enabled_addso"}) 				panel:AddControl("Checkbox", {Label = aR:T("LAchievements"),Command = "actmod_sv_avs"}) 				panel:ControlHelp(aR:T("LAchievements_H")):DockMargin( 16, 4, 16, 8 ) 				panel:AddControl("Label", {Text = ""}) 			end 			panel:AddControl("Label", {Text = aR:T("AL_COS")}) 			panel:AddControl("Checkbox", {Label = aR:T("AL_COS_EnLodng"),Command = "actmod_cl_enloading"}) 			panel:ControlHelp(aR:T("AL_COS_EnLodng_hlp")):DockMargin( 16, 4, 16, 8 ) 			panel:AddControl("Numpad", { Label = aR:T("AL_COS_Ky"), Command = "actmod_key_iconmenu" }) 			panel:AddControl("Checkbox", {Label = aR:T("AL_COS_EH"),Command = "actmod_cl_showbhelp"}) 			 			panel:AddControl("Label", {Text = ""}) 			local aed_ty2 = {Options = {}, CVars = {}, Label = "Type Message", MenuButton = "2"} 			aed_ty2.Options["1-None"] = {actmod_cl_showmasngerr = 0} 			aed_ty2.Options["2-Text"] = {actmod_cl_showmasngerr = 1} 			aed_ty2.Options["3-Picture"] = {actmod_cl_showmasngerr = 2} 			panel:AddControl("ComboBox", aed_ty2) aed_ty2 = nil 			panel:ControlHelp(aR:T("AL_COS_SMEr_hlp")):DockMargin( 16, 4, 16, 8 )  			if A_AM.ActMod.Mounted[ "Theatrical MMD" ] == true then 				panel:AddControl("Label", {Text = ""}) 				panel:AddControl("Label", {Text = "--------------------------------"}) 				panel:AddControl("Label", {Text = "--------------------------------"}) 				panel:AddControl("Label", {Text = ""}) 				panel:AddControl("Label", {Text = "Theatrical MMD by AhmedMake400 ,(Version ".. A_AM.ActMod.Mounted[ "Version ActEnt" ] ..")"}) 				if LocalPlayer():IsListenServerHost() then 					panel:AddControl("Label", {Text = aR:T("AL_SOS")}) 					panel:AddControl("Checkbox", {Label = "Enable ActorBot",Command = "actent_sv_actorbot"}) 					 					local aed_ty1 = {Options = {}, CVars = {}, Label = "selection for model:", MenuButton = "0"} 					aed_ty1.Options["0- Random"] = {actend_sv_smodel = 0} 					aed_ty1.Options["1- Manual"] = {actend_sv_smodel = 1} 					panel:AddControl("ComboBox", aed_ty1) 					panel:AddControl("TextBox", {Label = "Model Bot1 :", Description = "", MaxLength = 255, Text = "stuff", Command = "actend_sv_nmodelname1"}) 					panel:AddControl("TextBox", {Label = "Model Bot2 :", Description = "", MaxLength = 255, Text = "stuff", Command = "actend_sv_nmodelname2"}) 					panel:AddControl("TextBox", {Label = "Model Bot3 :", Description = "", MaxLength = 255, Text = "stuff", Command = "actend_sv_nmodelname3"}) 					aed_ty1 = nil 				end 			end 		end) 	end) end	   hook.Add( "InitLoadAnimations", "AM4.AddBaseTowOS", function()     wOS.DynaBase:RegisterSource({         Name = "Base Anim AM4",         Type =  WOS_DYNABASE.EXTENSION,         Male = "models/player/ani_am4/ani_base_m.mdl",         Female = "models/player/ani_am4/ani_base_f.mdl",         Zombie = "models/player/ani_am4/ani_base_z.mdl",     }) end ) hook.Add( "PreLoadAnimations", "wOS.DynaBase.MountAM4Base", function( gender )   if gender == WOS_DYNABASE.MALE then     IncludeModel( "models/player/ani_am4/ani_base_m.mdl" )   elseif gender == WOS_DYNABASE.FEMALE then     IncludeModel( "models/player/ani_am4/ani_base_f.mdl" )   elseif gender == WOS_DYNABASE.ZOMBIE then     IncludeModel( "models/player/ani_am4/ani_base_z.mdl" )    end end )  hook.Add( "InitLoadAnimations", "CTE.AddBaseTowOS", function() 	wOS.DynaBase:RegisterSource({ 		Name = "Animation Extension - Custom Taunt", 		Type =  WOS_DYNABASE.EXTENSION, 		Shared = "models/player/custom_taunt/mmd1.mdl" 	}) end ) hook.Add( "PreLoadAnimations", "wOS.DynaBase.MountCTE", function( gender )   if gender == WOS_DYNABASE.SHARED then     IncludeModel( "models/player/custom_taunt/fortnite1.mdl" )     IncludeModel( "models/player/custom_taunt/fortnite2.mdl" )     IncludeModel( "models/player/custom_taunt/fortnite3.mdl" )     IncludeModel( "models/player/custom_taunt/fulldance1.mdl" )     IncludeModel( "models/player/custom_taunt/fulldance2.mdl" )     IncludeModel( "models/player/custom_taunt/fulldance3.mdl" )     IncludeModel( "models/player/custom_taunt/fulldance4.mdl" )     IncludeModel( "models/player/custom_taunt/fulldance5.mdl" )     IncludeModel( "models/player/custom_taunt/fulldance6.mdl" )     IncludeModel( "models/player/custom_taunt/fulldance7.mdl" )     IncludeModel( "models/player/custom_taunt/fulldance8.mdl" )     IncludeModel( "models/player/custom_taunt/fulldance9.mdl" )     IncludeModel( "models/player/custom_taunt/mmd1.mdl" )   end end )   A_AM.ActMod.OneSutep = true  if SERVER then 	MsgC(Color( 100, 220, 255 ),"Server: " ,Color( 50, 200, 255 ),"[" ,Color( 100, 255, 255 ),"(ActMod)" ,Color( 50, 200, 255 ),"] Done Load Successfully\n" ) else 	MsgC(Color( 240, 240, 100 ),"Client: " ,Color( 50, 200, 255 ),"[" ,Color( 100, 255, 255 ),"(ActMod)" ,Color( 50, 200, 255 ),"] Done Load Successfully\n\n\n" ) end
